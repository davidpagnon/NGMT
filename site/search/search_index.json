{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"datasets/","title":"Datasets","text":"<p>This part of the project documentation focuses on the avaliable datasets.</p>"},{"location":"modules/","title":"Modules","text":"<p>This part of the project documentation focuses on the avaliable modules.</p>"},{"location":"modules/#modules.gsd.GSDA.gsd_low_back_acc","title":"<code>gsd_low_back_acc(imu_acceleration, sampling_frequency, plot_results)</code>","text":"<p>summary Perform Gait Sequence Detection (GSD) using low back accelerometer data.</p> <p>Parameters:</p> Name Type Description Default <code>imu_acceleration</code> <code>ndarray</code> <p>Input accelerometer data (N, 3) for x, y, and z axes.</p> required <code>sampling_frequency</code> <code>float</code> <p>Sampling frequency of the accelerometer data.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency.</p> Source code in <code>ngmt\\modules\\gsd\\GSDA.py</code> <pre><code>def gsd_low_back_acc(imu_acceleration, sampling_frequency, plot_results):\n    \"\"\"_summary_\n    Perform Gait Sequence Detection (GSD) using low back accelerometer data.\n\n    Args:\n        imu_acceleration (numpy.ndarray): Input accelerometer data (N, 3) for x, y, and z axes.\n        sampling_frequency (float): Sampling frequency of the accelerometer data.\n\n    Returns:\n        list: A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency.\n    \"\"\"\n    GSD_Output = {}\n\n    # Calculate the norm of acceleration as acceleration_norm using x, y, and z components.\n    acceleration_norm = np.sqrt(\n        imu_acceleration[:, 0] ** 2\n        + imu_acceleration[:, 1] ** 2\n        + imu_acceleration[:, 2] ** 2\n    )\n\n    # Resample acceleration_norm to target sampling frequency using resample_interpolate function.\n    initial_sampling_frequency = (\n        sampling_frequency  # Initial sampling frequency of the acceleration data\n    )\n    target_sampling_frequency = (\n        40  # Targeted sampling frequency of the acceleration data\n    )\n    resampled_acceleration = preprocessing.resample_interpolate(\n        acceleration_norm, initial_sampling_frequency, target_sampling_frequency\n    )  # Resampled data with 40Hz\n\n    # Applying Savitzky-Golay filter to smoothen the resampled data with frequency of 40Hz\n    window_length = 21\n    polynomial_order = 7\n    smoothed_acceleration = scipy.signal.savgol_filter(\n        resampled_acceleration, window_length, polynomial_order\n    )\n\n    # Load FIR filter designed and apply for the low SNR, impaired, asymmetric, and slow gait\n    filtering_file = scipy.io.loadmat(\n        \"C:\\\\Users\\\\Project\\\\Desktop\\\\Gait_Sequence\\\\Mobilise-D-TVS-Recommended-Algorithms\\\\GSDB\\\\Library\\\\FIR-2-3Hz-40.mat\"\n    )\n    num = filtering_file[\"Num\"][0, :]\n\n    # Remove drifts using defined function in utls (RemoveDrift40Hz).\n    # Define parameters of the filter\n    numerator_coefficient = num\n    denominator_coefficient = np.array(\n        [\n            1.0,\n        ]\n    )\n    detrended_acceleration = scipy.signal.filtfilt(\n        numerator_coefficient,\n        denominator_coefficient,\n        preprocessing.remove_40Hz_drift(smoothed_acceleration),\n    )\n\n    # Perform the continuous wavelet transform on the filtered acceleration data accN_filt2\n    scales = 10  #  At scale=10 the wavelet is stretched by a factor of 10, making it sensitive to lower frequencies in the signal.\n    wavelet = \"gaus2\"  #  The Gaussian wavelets (\"gausP\" where P is an integer between 1 and and 8) correspond to the Pth order derivatives of the function\n    sampling_period = (\n        1 / target_sampling_frequency\n    )  #  Sampling period which is equal to 1/algorithm_target_fs\n    coefficients, _ = pywt.cwt(\n        detrended_acceleration, np.arange(1, scales + 1), wavelet, sampling_period\n    )\n    desired_scale = 10  # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients\n    wavelet_transform_result = coefficients[desired_scale - 1, :]\n\n    # Applying Savitzky-Golay filter to further smoothen the wavelet transformed data\n    window_length = 11\n    polynomial_order = 5\n    smoothed_wavelet_result = scipy.signal.savgol_filter(\n        wavelet_transform_result, window_length, polynomial_order\n    )\n\n    # Perform continuous wavelet transform\n    coefficients, _ = pywt.cwt(\n        smoothed_wavelet_result, np.arange(1, scales + 1), wavelet, sampling_period\n    )\n    desired_scale = 10  # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients\n    further_smoothed_wavelet_result = coefficients[desired_scale - 1, :]\n\n    # Smoothing the data using successive Gaussian filters from scipy.ndimage\n    sigma_1 = 1.9038  # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt5,'gaussian',window);\n    sigma_2 = 1.9038  # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt6,'gaussian',window);\n    sigma_3 = 2.8936  # The sigma_1 = 2.8936 gives the same results when window=15 in the MATLAB fuction smoothdata(accN_filt7,'gaussian',window);\n    sigma_4 = 1.9038  # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt8,'gaussian',window);\n    sigma_values = [\n        sigma_1,\n        sigma_2,\n        sigma_3,\n        sigma_4,\n    ]  # Vectors of sigma values for successive Gaussian filters\n    first_gaussian_filtered_signal = scipy.ndimage.gaussian_filter(\n        further_smoothed_wavelet_result,\n        sigma=sigma_values[0],\n        order=0,\n        output=None,\n        mode=\"reflect\",\n        cval=0.0,\n        truncate=4.0,\n        radius=None,\n    )\n    second_gaussian_filtered_signal = scipy.ndimage.gaussian_filter(\n        first_gaussian_filtered_signal,\n        sigma=sigma_values[1],\n        order=0,\n        output=None,\n        mode=\"reflect\",\n        cval=0.0,\n        truncate=4.0,\n        radius=None,\n    )\n    third_gaussian_filtered_signal = scipy.ndimage.gaussian_filter(\n        second_gaussian_filtered_signal,\n        sigma=sigma_values[2],\n        order=0,\n        output=None,\n        mode=\"reflect\",\n        cval=0.0,\n        truncate=4.0,\n        radius=None,\n    )\n    fourth_gaussian_filtered_signal = scipy.ndimage.gaussian_filter(\n        third_gaussian_filtered_signal,\n        sigma=sigma_values[3],\n        order=0,\n        output=None,\n        mode=\"reflect\",\n        cval=0.0,\n        truncate=4.0,\n        radius=None,\n    )\n\n    # Use processed acceleration data for further analysis.\n    detected_activity_signal = fourth_gaussian_filtered_signal\n\n    # Compute the envelope of the processed acceleration data.\n    envelope = []\n    envelope, _ = preprocessing.calculate_envelope_activity(\n        detected_activity_signal,\n        int(round(target_sampling_frequency)),\n        1,\n        int(round(target_sampling_frequency)),\n        1,\n    )\n\n    # Initialize a list for walking bouts.\n    walking_bouts = []\n\n    # Process alarm data to identify walking bouts.\n    if envelope.size &gt; 0:\n        non_zero_indices = np.where(envelope &gt; 0)[0]  # Find nonzeros\n        index_ranges = preprocessing.find_consecutive_groups(envelope &gt; 0)\n        for j in range(len(index_ranges)):\n            if index_ranges[j, 1] - index_ranges[j, 0] &lt;= 3 * target_sampling_frequency:\n                envelope[index_ranges[j, 0] : index_ranges[j, 1] + 1] = 0\n            else:\n                walking_bouts.extend(\n                    detected_activity_signal[\n                        index_ranges[j, 0] : index_ranges[j, 1] + 1\n                    ]\n                )\n\n        # Convert walk_low_back list to a NumPy array\n        walking_bouts_array = np.array(walking_bouts)\n\n        # Find positive peaks in the walk_low_back_array\n        positive_peak_indices, _ = scipy.signal.find_peaks(\n            walking_bouts_array, height=0\n        )\n\n        # Get the corresponding y-axis data values for the positive peak\n        positive_peaks = walking_bouts_array[positive_peak_indices]\n\n        # Find negative peaks in the inverted walk_low_back array\n        negative_peak_indices, _ = scipy.signal.find_peaks(-walking_bouts_array)\n\n        # Get the corresponding y-axis data values for the positive peak\n        negative_peaks = -walking_bouts_array[negative_peak_indices]\n\n        # Convert pksn list to a NumPy array before using it in concatenation\n        negative_peaks_array = np.array(negative_peaks)\n\n        # Combine positive and negative peaks\n        combined_peaks = np.concatenate((positive_peaks, negative_peaks_array))\n\n        # Calculate the data adaptive threshold using the 5th percentile of the combined peaks\n        threshold = np.percentile(combined_peaks, 5)\n\n        # Set f to sigDetActv\n        selected_signal = detected_activity_signal\n\n    else:\n        threshold = (\n            0.15  # If hilbert envelope fails to detect 'active', try version [1]\n        )\n        selected_signal = smoothed_wavelet_result\n\n    # Detect mid-swing peaks.\n    min_peaks, max_peaks = preprocessing.find_local_min_max(selected_signal, threshold)\n\n    # Find pulse trains in max_peaks and remove ones with steps less than 4\n    pulse_trains_max = preprocessing.identify_pulse_trains(max_peaks)\n\n    # Access the fields of the struct-like array\n    pulse_trains_max = [train for train in pulse_trains_max if train[\"steps\"] &gt;= 4]\n\n    # Find pulse trains in min_peaks and remove ones with steps less than 4\n    pulse_trains_min = preprocessing.identify_pulse_trains(min_peaks)\n\n    # Access the fields of the struct-like array\n    pulse_trains_min = [train for train in pulse_trains_min if train[\"steps\"] &gt;= 4]\n\n    # Convert t1 and t2 to sets and find their intersection\n    walking_periods = preprocessing.find_interval_intersection(\n        preprocessing.convert_pulse_train_to_array(pulse_trains_max),\n        preprocessing.convert_pulse_train_to_array(pulse_trains_min),\n    )\n\n    if walking_periods is None:  # Check if walking_periods is empty\n        walking_bouts = []\n        MidSwing = []\n    else:\n        walking_bouts, MidSwing = preprocessing.organize_and_pack_results(\n            walking_periods, max_peaks\n        )  # Call the organize_and_pack_results function with walking_periods and MaxPeaks\n        if walking_bouts:  # Check if w is not empty\n            walking_bouts[0][\"start\"] = max(\n                [1, walking_bouts[0][\"start\"]]\n            )  # Update the start value of the first element in w\n            walking_bouts[-1][\"end\"] = min(\n                [walking_bouts[-1][\"end\"], len(detected_activity_signal)]\n            )  # Update the end value of the last element in w\n\n    walking_bouts_length = len(walking_bouts)  # Calculate the length (size) of w\n    filtered_walking_bouts = []  # Initialize an empty list w_new\n    counter = 0  # Initialize a counter variable k\n    for j in range(walking_bouts_length):  # Loop through the range from 0 to n-1\n        if (\n            walking_bouts[j][\"steps\"] &gt;= 5\n        ):  # Check if the 'steps' field of the j-th element in w is greater than or equal to 5\n            counter += 1  # Increment the counter k\n            filtered_walking_bouts.append(\n                {\"start\": walking_bouts[j][\"start\"], \"end\": walking_bouts[j][\"end\"]}\n            )  # Add a new element to w_new with 'start' and 'end' fields from the j-th element in w\n\n    walking_labels = np.zeros(\n        len(detected_activity_signal)\n    )  # Initialize an array of zeros with the length of sigDetActv\n    filtered_walking_bouts_length = len(\n        filtered_walking_bouts\n    )  # Calculate the length (size) of w_new\n    for j in range(\n        filtered_walking_bouts_length\n    ):  # Loop through the range from 0 to n-1\n        walking_labels[\n            filtered_walking_bouts[j][\"start\"] : filtered_walking_bouts[j][\"end\"] + 1\n        ] = 1  # Update elements in walking_labels to 1 between the 'start' and 'end' indices of the j-th element in w_new\n\n    # Merge walking bouts if break less than 3 seconds\n    ind_noWk = []\n    ind_noWk = preprocessing.find_consecutive_groups(walking_labels == 0)\n    if len(ind_noWk) &gt; 0:\n        for j in range(len(ind_noWk)):\n            if ind_noWk[j, 1] - ind_noWk[j, 0] &lt;= target_sampling_frequency * 3:\n                walking_labels[ind_noWk[j, 0] : ind_noWk[j, 1] + 1] = 1\n\n    ind_Wk = []\n    if np.any(walking_labels == 1):\n        ind_Wk = preprocessing.find_consecutive_groups(walking_labels == 1)\n        if len(ind_Wk) &gt; 0:\n            GSD_Output = []\n            for j in range(len(ind_Wk)):\n                GSD_Output.append(\n                    {\n                        \"Start\": ind_Wk[j, 0] / target_sampling_frequency,\n                        \"End\": ind_Wk[j, 1] / target_sampling_frequency,\n                        \"fs\": initial_sampling_frequency,\n                    }\n                )\n    else:\n        print(\"No gait sequence(s) detected\")\n\n    # Plot results if set to true\n    if plot_results:\n        plt.figure(figsize=(10, 6))\n\n        plt.plot(detected_activity_signal, linewidth=3)\n        plt.plot(walking_labels, \"r\", linewidth=5)\n\n        plt.title(\"Detected Activity and Walking Labels\", fontsize=20)\n        plt.xlabel(\"Samples (40Hz)\", fontsize=20)\n        plt.ylabel(\"Amplitude\", fontsize=20)\n\n        plt.legend(\n            [\n                \"Processed Acceleration Signal from Lowerback IMU Sensor\",\n                \"Detected Gait Sequences\",\n            ],\n            fontsize=16,\n        )\n        plt.grid(True)\n\n        plt.xticks(fontsize=20)\n        plt.yticks(fontsize=20)\n\n        plt.show()\n\n    return GSD_Output\n</code></pre>"},{"location":"utils/","title":"Utilities","text":"<p>This part of the project documentation focuses on the avaliable utilities.</p>"},{"location":"utils/#utils.preprocessing.calculate_envelope_activity","title":"<code>calculate_envelope_activity(input_signal, smooth_window, threshold_style, duration, plot_results)</code>","text":"<p>summary Calculate envelope-based activity detection using the Hilbert transform.</p> <p>This function analyzes an input signal <code>input_signal</code> to detect periods of activity based on the signal's envelope. It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an adaptive threshold to identify active regions.</p> <p>Args: input_signal (array_like): The input signal. smooth_window (int): Window length for smoothing the envelope (default is 20). threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1). duration (int): Minimum duration of activity to be detected (default is 20). plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1).</p> <p>tuple(ndarray, ndarray): A tuple containing:     - alarm (ndarray): Vector indicating active parts of the signal.     - env (ndarray): Smoothed envelope of the signal.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def calculate_envelope_activity(\n    input_signal, smooth_window, threshold_style, duration, plot_results\n):\n    \"\"\"_summary_\n    Calculate envelope-based activity detection using the Hilbert transform.\n\n    This function analyzes an input signal `input_signal` to detect periods of activity based on the signal's envelope.\n    It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an\n    adaptive threshold to identify active regions.\n\n    Args:\n    input_signal (array_like): The input signal.\n    smooth_window (int): Window length for smoothing the envelope (default is 20).\n    threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1).\n    duration (int): Minimum duration of activity to be detected (default is 20).\n    plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1).\n\n    Returns:\n    tuple(ndarray, ndarray): A tuple containing:\n        - alarm (ndarray): Vector indicating active parts of the signal.\n        - env (ndarray): Smoothed envelope of the signal.\n    \"\"\"\n    # Input handling\n    if len(locals()) &lt; 5:  # If there is &lt; 5 inputs.\n        plot_results = 1  # Default value\n        if len(locals()) &lt; 4:  # If there is &lt; 4 inputs.\n            duration = 20  # Default value\n            if len(locals()) &lt; 3:  # If there is &lt; 3 inputs.\n                threshold_style = 1  # Default 1, means it is done automatically\n                if len(locals()) &lt; 2:  # If there is &lt; 2 inputs.\n                    smooth_window = 20  # Default value for smoothing length\n                    if len(locals()) &lt; 1:  # If there is &lt; 1 inputs.\n                        v = np.tile(\n                            np.concatenate(\n                                (0.1 * np.ones((200, 1)), np.ones((100, 1)))\n                            ),\n                            (10, 1),\n                        )  # Generate true variance profile\n                        input_signal = np.sqrt(v) * np.random.randn(*v.shape)\n\n    # Calculate the analytical signal and get the envelope\n    input_signal = (\n        input_signal.flatten()\n    )  # Return a copy of the preprocessed data into one dimension.\n    # Compute the analytic signal, using the Hilbert transform form scipy.signal.\n    analytic = scipy.signal.hilbert(input_signal)\n    env = np.abs(analytic)  # Compute the envelope of the analytic signal.\n\n    # Take the moving average of the analytic signal\n    env = scipy.signal.convolve(\n        env, np.ones(smooth_window) / smooth_window, mode=\"full\"\n    )  # Returns the discrete, linear convolution of two one-dimensional sequences.\n    env = env - np.mean(env)  # Remove the offset by subtracting the mean of 'env'\n    env = env / np.max(env)  # Normalize the 'env' by dividing by its maximum value\n\n    # Threshold the signal\n    if threshold_style == 0:\n        hg = plt.figure()\n        plt.plot(env)\n        plt.title(\"Select a threshold on the graph\")\n        _, THR_SIG = plt.ginput(1)\n        plt.close(hg)\n    elif threshold_style == 1:\n        THR_SIG = 4 * np.mean(env)\n\n    # Set noise and signal levels\n    noise = np.mean(env) * (\n        1 / 3\n    )  # Noise level: Set an initial estimate of the noise level\n    threshold = np.mean(\n        env\n    )  # Signal level: It's used as a reference to distinguish between the background noise and the actual signal activity.\n\n    # Initialize Buffers\n    thres_buf = np.zeros(\n        len(env) - duration\n    )  # This buffer stores values related to a threshold.\n    noise_buf = np.zeros(\n        len(env) - duration\n    )  # This buffer stores values related to the noise.\n    THR_buf = np.zeros(len(env))  # This buffer stores threshold values.\n    alarm = np.zeros_like(env)  # This buffer tracks alarm-related information.\n    h = 1\n\n    for i in range(len(env) - duration):\n        if np.all(env[i : i + duration] &gt; THR_SIG):\n            alarm[i] = np.max(\n                env\n            )  # If the current window of data surpasses the threshold, set an alarm.\n            threshold = 0.1 * np.mean(\n                env[i : i + duration]\n            )  # Set a new threshold based on the mean of the current window.\n            h += 1\n        else:\n            # Update noise\n            if np.mean(env[i : i + duration]) &lt; THR_SIG:\n                noise = np.mean(\n                    env[i : i + duration]\n                )  # Update the noise value based on the mean of the current window.\n            else:\n                if len(noise_buf) &gt; 0:\n                    noise = np.mean(\n                        noise_buf\n                    )  # If available, use the mean of noise buffer to update the noise.\n                    thres_buf[\n                        i\n                    ] = threshold  # Store the threshold value in the threshold buffer.\n                    noise_buf[i] = noise  # Store the noise value in the noise buffer.\n\n            # Update threshold\n            if h &gt; 1:\n                THR_SIG = noise + 0.50 * (\n                    np.abs(threshold - noise)\n                )  # Update the threshold using noise and threshold values.\n                THR_buf[\n                    i\n                ] = THR_SIG  # Store the updated threshold value in the threshold buffer.\n\n    if plot_results == 1:\n        plt.figure()\n        ax = plt.subplot(2, 1, 1)\n        plt.plot(input_signal)\n        plt.plot(np.where(alarm != 0, np.max(input_signal), 0), \"r\", linewidth=2.5)\n        plt.plot(THR_buf, \"--g\", linewidth=2.5)\n        plt.title(\"Raw Signal and detected Onsets of activity\")\n        plt.legend(\n            [\"Raw Signal\", \"Detected Activity in Signal\", \"Adaptive Threshold\"],\n            loc=\"upper left\",\n        )\n        plt.grid(True)\n        plt.axis(\"tight\")\n\n        ax2 = plt.subplot(2, 1, 2)\n        plt.plot(env)\n        plt.plot(THR_buf, \"--g\", linewidth=2.5)\n        plt.plot(thres_buf, \"--r\", linewidth=2)\n        plt.plot(noise_buf, \"--k\", linewidth=2)\n        plt.title(\"Smoothed Envelope of the signal (Hilbert Transform)\")\n        plt.legend(\n            [\n                \"Smoothed Envelope of the signal (Hilbert Transform)\",\n                \"Adaptive Threshold\",\n                \"Activity level\",\n                \"Noise Level\",\n            ]\n        )\n        plt.grid(True)\n        plt.axis(\"tight\")\n        plt.tight_layout()\n        plt.show()\n\n    return alarm, env\n</code></pre>"},{"location":"utils/#utils.preprocessing.convert_pulse_train_to_array","title":"<code>convert_pulse_train_to_array(pulse_train_list)</code>","text":"<p>summary Convert a List of Pulse Train Dictionaries to a 2D Array.</p> <p>This function takes a list of pulse train dictionaries and converts it into a 2D array. Each dictionary is expected to have keys 'start' and 'end', and the function creates an array where each row corresponds to a dictionary with the 'start' value in the first column and the 'end' value in the second column.</p> <p>Parameters:</p> Name Type Description Default <code>pulse_train_list</code> <code>list</code> <p>A list of dictionaries containing pulse train information.</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value in the first column and the 'end' value in the second column.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def convert_pulse_train_to_array(pulse_train_list):\n    \"\"\"_summary_\n    Convert a List of Pulse Train Dictionaries to a 2D Array.\n\n    This function takes a list of pulse train dictionaries and converts it into a 2D array.\n    Each dictionary is expected to have keys 'start' and 'end', and the function creates an array\n    where each row corresponds to a dictionary with the 'start' value in the first column and the\n    'end' value in the second column.\n\n    Args:\n        pulse_train_list (list): A list of dictionaries containing pulse train information.\n\n    Returns:\n        numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value\n            in the first column and the 'end' value in the second column.\n    \"\"\"\n    array_representation = np.zeros((len(pulse_train_list), 2), dtype=np.uint64)\n\n    for i, pulse_train_dict in enumerate(pulse_train_list):\n        array_representation[i, 0] = pulse_train_dict[\n            \"start\"\n        ]  # Access the 'start' key within the dictionary\n        array_representation[i, 1] = pulse_train_dict[\n            \"end\"\n        ]  # Access the 'end' key within the dictionary\n\n    return array_representation\n</code></pre>"},{"location":"utils/#utils.preprocessing.find_consecutive_groups","title":"<code>find_consecutive_groups(input_array)</code>","text":"<p>summary Find consecutive groups of non-zero values in an input array.</p> <p>This function takes an input array <code>input_array</code>, converts it to a column vector, and identifies consecutive groups of non-zero values. It returns a 2D array where each row represents a group, with the first column containing the start index of the group and the second column containing the end index of the group.</p> <p>Args: input_array (ndarray): The input array.</p> <p>ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values.     The first column contains the start index of the group, and the second column contains the end index.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def find_consecutive_groups(input_array):\n    \"\"\"_summary_\n    Find consecutive groups of non-zero values in an input array.\n\n    This function takes an input array `input_array`, converts it to a column vector, and identifies consecutive groups of\n    non-zero values. It returns a 2D array where each row represents a group, with the first column containing\n    the start index of the group and the second column containing the end index of the group.\n\n    Args:\n    input_array (ndarray): The input array.\n\n    Returns:\n    ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values.\n        The first column contains the start index of the group, and the second column contains the end index.\n    \"\"\"\n    temp = np.where(input_array)[0]  # find indices of non-zeros\n    idx = np.where(np.diff(temp) &gt; 1)[\n        0\n    ]  # find where the difference between indices is greater than 1\n    ind = np.zeros((len(idx) + 1, 2), dtype=int)  # initialize the output array\n    ind[:, 1] = temp[np.append(idx, -1)]  # set the second column\n    ind[:, 0] = temp[np.insert(idx + 1, 0, 0)]  # set the first column\n\n    return ind\n</code></pre>"},{"location":"utils/#utils.preprocessing.find_interval_intersection","title":"<code>find_interval_intersection(set_a, set_b)</code>","text":"<p>summary Find the Intersection of Two Sets of Intervals.</p> <p>Given two sets of intervals, this function computes their intersection and returns a new set of intervals representing the overlapping regions.</p> <p>Parameters:</p> Name Type Description Default <code>set_a</code> <code>ndarray</code> <p>The first set of intervals, where each row represents an interval with two values indicating the start and end points.</p> required <code>set_b</code> <code>ndarray</code> <p>The second set of intervals, with the same structure as <code>set_a</code>.</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: A new set of intervals representing the intersection of intervals from <code>set_a</code> and <code>set_b</code>.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def find_interval_intersection(set_a, set_b):\n    \"\"\"_summary_\n    Find the Intersection of Two Sets of Intervals.\n\n    Given two sets of intervals, this function computes their intersection and returns a new set\n    of intervals representing the overlapping regions.\n\n    Args:\n        set_a (numpy.ndarray): The first set of intervals, where each row represents an interval with two values\n            indicating the start and end points.\n        set_b (numpy.ndarray): The second set of intervals, with the same structure as `set_a`.\n\n    Returns:\n        numpy.ndarray: A new set of intervals representing the intersection of intervals from `set_a` and `set_b`.\n    \"\"\"\n    num_intervals_a = set_a.shape[0]\n    num_intervals_b = set_b.shape[0]\n\n    intersection_intervals = []\n\n    if num_intervals_a == 0 or num_intervals_b == 0:\n        return np.array(intersection_intervals)\n\n    index_a = 0\n    index_b = 0\n    state = 3\n\n    while index_a &lt; num_intervals_a and index_b &lt; num_intervals_b:\n        if state == 1:\n            if set_a[index_a, 1] &lt; set_b[index_b, 0]:\n                index_a += 1\n                state = 3\n            elif set_a[index_a, 1] &lt; set_b[index_b, 1]:\n                intersection_intervals.append([set_b[index_b, 0], set_a[index_a, 1]])\n                index_a += 1\n                state = 2\n            else:\n                intersection_intervals.append(set_b[index_b, :])\n                index_b += 1\n        elif state == 2:\n            if set_b[index_b, 1] &lt; set_a[index_a, 0]:\n                index_b += 1\n                state = 3\n            elif set_b[index_b, 1] &lt; set_a[index_a, 1]:\n                intersection_intervals.append([set_a[index_a, 0], set_b[index_b, 1]])\n                index_b += 1\n                state = 1\n            else:\n                intersection_intervals.append(set_a[index_a, :])\n                index_a += 1\n        elif state == 3:\n            if set_a[index_a, 0] &lt; set_b[index_b, 0]:\n                state = 1\n            else:\n                state = 2\n\n    return np.array(intersection_intervals)\n</code></pre>"},{"location":"utils/#utils.preprocessing.find_local_min_max","title":"<code>find_local_min_max(signal, threshold=None)</code>","text":"<p>summary Find Local Minima and Maxima in a Given Signal.</p> <p>This function takes an input signal and identifies the indices of local minima and maxima. Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>signal</code> <code>ndarray</code> <p>The input signal.</p> required <code>threshold</code> <code>float or None</code> <p>Threshold for filtering out minima and maxima below and above this value, respectively.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>tuple</code> <code>(ndarray, ndarray)</code> <p>A tuple containing two arrays: - minima_indices: Indices of local minima in the signal. - maxima_indices: Indices of local maxima in the signal.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def find_local_min_max(signal, threshold=None):\n    \"\"\"_summary_\n    Find Local Minima and Maxima in a Given Signal.\n\n    This function takes an input signal and identifies the indices of local minima and maxima.\n    Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold.\n\n    Args:\n        signal (numpy.ndarray): The input signal.\n        threshold (float or None, optional): Threshold for filtering out minima and maxima below and above this value, respectively.\n\n    Returns:\n        tuple(numpy.ndarray, numpy.ndarray): A tuple containing two arrays:\n            - minima_indices: Indices of local minima in the signal.\n            - maxima_indices: Indices of local maxima in the signal.\n    \"\"\"\n    signal_diff = np.diff(signal)\n    zero_crossings = np.where(signal_diff[1:] * signal_diff[:-1] &lt;= 0)[0]\n    zero_crossings = zero_crossings + 1\n\n    minima_indices = zero_crossings[signal_diff[zero_crossings] &gt;= 0]\n    maxima_indices = zero_crossings[signal_diff[zero_crossings] &lt; 0]\n\n    if threshold is not None:\n        maxima_indices = maxima_indices[signal[maxima_indices] &gt; threshold]\n        minima_indices = minima_indices[signal[minima_indices] &lt; -threshold]\n\n    return minima_indices, maxima_indices\n</code></pre>"},{"location":"utils/#utils.preprocessing.identify_pulse_trains","title":"<code>identify_pulse_trains(signal)</code>","text":"<p>summary Identify Pulse Trains in a Given Signal.</p> <p>This function takes an input signal and detects pulse trains within the signal. A pulse train is identified as a sequence of values with small intervals between adjacent values.</p> <p>Parameters:</p> Name Type Description Default <code>signal</code> <code>ndarray</code> <p>The input signal.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of dictionaries, each containing information about a detected pulse train. Each dictionary has the following keys: - 'start': The index of the first value in the pulse train. - 'end': The index of the last value in the pulse train. - 'steps': The number of steps in the pulse train.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def identify_pulse_trains(signal):\n    \"\"\"_summary_\n    Identify Pulse Trains in a Given Signal.\n\n    This function takes an input signal and detects pulse trains within the signal.\n    A pulse train is identified as a sequence of values with small intervals between adjacent values.\n\n    Args:\n        signal (numpy.ndarray): The input signal.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected pulse train.\n            Each dictionary has the following keys:\n            - 'start': The index of the first value in the pulse train.\n            - 'end': The index of the last value in the pulse train.\n            - 'steps': The number of steps in the pulse train.\n    \"\"\"\n    pulse_trains = []\n    walking_flag = 0\n    threshold = 3.5 * 40\n    pulse_count = 0\n\n    if len(signal) &gt; 2:\n        for i in range(len(signal) - 1):\n            if signal[i + 1] - signal[i] &lt; threshold:\n                if walking_flag == 0:\n                    pulse_trains.append({\"start\": signal[i], \"steps\": 1})\n                    pulse_count += 1\n                    walking_flag = 1\n                else:\n                    pulse_trains[pulse_count - 1][\"steps\"] += 1\n                    threshold = (\n                        1.5 * 40\n                        + (signal[i] - pulse_trains[pulse_count - 1][\"start\"])\n                        / pulse_trains[pulse_count - 1][\"steps\"]\n                    )\n            else:\n                if walking_flag == 1:\n                    pulse_trains[pulse_count - 1][\"end\"] = signal[i - 1]\n                    walking_flag = 0\n                    threshold = 3.5 * 40\n\n    if walking_flag == 1:\n        if signal[-1] - signal[-2] &lt; threshold:\n            pulse_trains[-1][\"end\"] = signal[-1]\n            pulse_trains[-1][\"steps\"] += 1\n        else:\n            pulse_trains[-1][\"end\"] = signal[-2]\n\n    return pulse_trains\n</code></pre>"},{"location":"utils/#utils.preprocessing.organize_and_pack_results","title":"<code>organize_and_pack_results(walking_periods, peak_steps)</code>","text":"<p>Organize and Pack Walking Results with Associated Peak Steps.</p> <p>Given lists of walking periods and peak step indices, this function organizes and packs the results into a more structured format. It calculates the number of steps in each walking period, associates peak steps with their corresponding walking periods, and extends the duration of walking periods based on step time. The function also checks for overlapping walking periods and merges them.</p> <p>Parameters:</p> Name Type Description Default <code>walking_periods</code> <code>list</code> <p>List of tuples representing walking periods, where each tuple contains the start and end indices.</p> required <code>peak_steps</code> <code>list</code> <p>List of peak step indices.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>(list, list)</code> <p>A tuple containing two elements: - A list of dictionaries representing organized walking results, each dictionary contains:     - 'start': Start index of the walking period.     - 'end': End index of the walking period.     - 'steps': Number of steps within the walking period.     - 'mid_swing': List of peak step indices within the walking period. - A list of sorted peak step indices across all walking periods.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def organize_and_pack_results(walking_periods, peak_steps):\n    \"\"\"Organize and Pack Walking Results with Associated Peak Steps.\n\n    Given lists of walking periods and peak step indices, this function organizes and packs the results\n    into a more structured format. It calculates the number of steps in each walking period, associates\n    peak steps with their corresponding walking periods, and extends the duration of walking periods based\n    on step time. The function also checks for overlapping walking periods and merges them.\n\n    Args:\n        walking_periods (list): List of tuples representing walking periods, where each tuple contains the start and end indices.\n        peak_steps (list): List of peak step indices.\n\n    Returns:\n        tuple(list, list): A tuple containing two elements:\n            - A list of dictionaries representing organized walking results, each dictionary contains:\n                - 'start': Start index of the walking period.\n                - 'end': End index of the walking period.\n                - 'steps': Number of steps within the walking period.\n                - 'mid_swing': List of peak step indices within the walking period.\n            - A list of sorted peak step indices across all walking periods.\n    \"\"\"\n    num_periods = len(walking_periods)\n    organized_results = [\n        {\n            \"start\": walking_periods[i][0],\n            \"end\": walking_periods[i][1],\n            \"steps\": 0,\n            \"mid_swing\": [],\n        }\n        for i in range(num_periods)\n    ]\n    all_mid_swing = []\n\n    for i in range(num_periods):\n        steps_within_period = [\n            p\n            for p in peak_steps\n            if organized_results[i][\"start\"] &lt;= p &lt;= organized_results[i][\"end\"]\n        ]\n        organized_results[i][\"steps\"] = len(steps_within_period)\n        organized_results[i][\"mid_swing\"] = steps_within_period\n        all_mid_swing.extend(steps_within_period)\n\n        # Calculate step time based on detected peak steps\n        if len(steps_within_period) &gt; 2:\n            step_time = sum(\n                [\n                    steps_within_period[j + 1] - steps_within_period[j]\n                    for j in range(len(steps_within_period) - 1)\n                ]\n            ) / (len(steps_within_period) - 1)\n            organized_results[i][\"start\"] = int(\n                organized_results[i][\"start\"] - 1.5 * step_time / 2\n            )\n            organized_results[i][\"end\"] = int(\n                organized_results[i][\"end\"] + 1.5 * step_time / 2\n            )\n\n    all_mid_swing.sort()\n\n    # Check for overlapping walking periods and merge them\n    i = 0\n    while i &lt; num_periods - 1:\n        if organized_results[i][\"end\"] &gt;= organized_results[i + 1][\"start\"]:\n            organized_results[i][\"end\"] = organized_results[i + 1][\"end\"]\n            organized_results[i][\"steps\"] += organized_results[i + 1][\"steps\"]\n            organized_results[i][\"mid_swing\"].extend(\n                organized_results[i + 1][\"mid_swing\"]\n            )\n            organized_results.pop(i + 1)\n            num_periods -= 1\n        else:\n            i += 1\n\n    return organized_results, all_mid_swing\n</code></pre>"},{"location":"utils/#utils.preprocessing.remove_40Hz_drift","title":"<code>remove_40Hz_drift(signal)</code>","text":"<p>summary Remove 40Hz drift from a signal using a high-pass filter.</p> <p>This function applies a high-pass filter to remove low-frequency drift at 40Hz from the input signal <code>signal</code>.</p> <p>Args: signal (array_like): The input signal.</p> <p>Returns: filtered_signal (ndarray): The filtered signal with removed drift.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def remove_40Hz_drift(signal):\n    \"\"\"_summary_\n    Remove 40Hz drift from a signal using a high-pass filter.\n\n    This function applies a high-pass filter to remove low-frequency drift at 40Hz\n    from the input signal `signal`.\n\n    Args:\n    signal (array_like): The input signal.\n\n    Returns:\n    filtered_signal (ndarray): The filtered signal with removed drift.\n    \"\"\"\n    numerator_coefficient = np.array(\n        [1, -1]\n    )  # The numerator coefficient vector of the filter.\n    denominator_coefficient = np.array(\n        [1, -0.9748]\n    )  # The denominator coefficient vector of the filter.\n    filtered_signal = scipy.signal.filtfilt(\n        numerator_coefficient,\n        denominator_coefficient,\n        signal,\n        axis=0,\n        padtype=\"odd\",\n        padlen=3 * (max(len(numerator_coefficient), len(denominator_coefficient)) - 1),\n    )\n\n    return filtered_signal\n</code></pre>"},{"location":"utils/#utils.preprocessing.resample_interpolate","title":"<code>resample_interpolate(input_signal, initial_sampling_rate, target_sampling_rate)</code>","text":"<p>summary Resample and interpolate a signal to a new sampling rate.</p> <p>This function takes a signal <code>input_signal</code> sampled at an initial sampling rate <code>initial_sampling_rate</code> and resamples it to a new sampling rate <code>target_sampling_rate</code> using linear interpolation.</p> <p>Args: input_signal (array_like): The input signal. initial_sampling_rate (float): The initial sampling rate of the input signal. target_sampling_rate (float): The desired sampling rate for the output signal.</p> <p>Returns: resampled_signal (array_like): The resampled and interpolated signal.</p> Source code in <code>ngmt\\utils\\preprocessing.py</code> <pre><code>def resample_interpolate(input_signal, initial_sampling_rate, target_sampling_rate):\n    \"\"\"_summary_\n    Resample and interpolate a signal to a new sampling rate.\n\n    This function takes a signal `input_signal` sampled at an initial sampling rate `initial_sampling_rate`\n    and resamples it to a new sampling rate `target_sampling_rate` using linear interpolation.\n\n    Args:\n    input_signal (array_like): The input signal.\n    initial_sampling_rate (float): The initial sampling rate of the input signal.\n    target_sampling_rate (float): The desired sampling rate for the output signal.\n\n    Returns:\n    resampled_signal (array_like): The resampled and interpolated signal.\n    \"\"\"\n    recording_time = len(input_signal)\n    x = np.arange(1, recording_time + 1)\n    xq = np.arange(1, recording_time + 1, initial_sampling_rate / target_sampling_rate)\n    interpolator = scipy.interpolate.interp1d(\n        x, input_signal, kind=\"linear\", axis=0, fill_value=\"extrapolate\"\n    )  # Create an interpolation function and apply it to the data\n    resampled_signal = interpolator(xq)\n\n    return resampled_signal\n</code></pre>"}]}