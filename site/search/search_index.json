{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"datasets/","text":"This part of the project documentation focuses on the avaliable datasets .","title":"Datasets"},{"location":"modules/","text":"This part of the project documentation focuses on the avaliable modules . gsd_low_back_acc ( imu_acceleration , sampling_frequency , plot_results ) summary Perform Gait Sequence Detection (GSD) using low back accelerometer data. Parameters: Name Type Description Default imu_acceleration ndarray Input accelerometer data (N, 3) for x, y, and z axes. required sampling_frequency float Sampling frequency of the accelerometer data. required Returns: Name Type Description list A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency. Source code in ngmt\\modules\\gsd\\GSDA.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 def gsd_low_back_acc ( imu_acceleration , sampling_frequency , plot_results ): \"\"\"_summary_ Perform Gait Sequence Detection (GSD) using low back accelerometer data. Args: imu_acceleration (numpy.ndarray): Input accelerometer data (N, 3) for x, y, and z axes. sampling_frequency (float): Sampling frequency of the accelerometer data. Returns: list: A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency. \"\"\" GSD_Output = {} # Calculate the norm of acceleration as acceleration_norm using x, y, and z components. acceleration_norm = np . sqrt ( imu_acceleration [:, 0 ] ** 2 + imu_acceleration [:, 1 ] ** 2 + imu_acceleration [:, 2 ] ** 2 ) # Resample acceleration_norm to target sampling frequency using resample_interpolate function. initial_sampling_frequency = ( sampling_frequency # Initial sampling frequency of the acceleration data ) target_sampling_frequency = ( 40 # Targeted sampling frequency of the acceleration data ) resampled_acceleration = preprocessing . resample_interpolate ( acceleration_norm , initial_sampling_frequency , target_sampling_frequency ) # Resampled data with 40Hz # Applying Savitzky-Golay filter to smoothen the resampled data with frequency of 40Hz window_length = 21 polynomial_order = 7 smoothed_acceleration = scipy . signal . savgol_filter ( resampled_acceleration , window_length , polynomial_order ) # Load FIR filter designed and apply for the low SNR, impaired, asymmetric, and slow gait filtering_file = scipy . io . loadmat ( \"C: \\\\ Users \\\\ Project \\\\ Desktop \\\\ Gait_Sequence \\\\ Mobilise-D-TVS-Recommended-Algorithms \\\\ GSDB \\\\ Library \\\\ FIR-2-3Hz-40.mat\" ) num = filtering_file [ \"Num\" ][ 0 , :] # Remove drifts using defined function in utls (RemoveDrift40Hz). # Define parameters of the filter numerator_coefficient = num denominator_coefficient = np . array ( [ 1.0 , ] ) detrended_acceleration = scipy . signal . filtfilt ( numerator_coefficient , denominator_coefficient , preprocessing . remove_40Hz_drift ( smoothed_acceleration ), ) # Perform the continuous wavelet transform on the filtered acceleration data accN_filt2 scales = 10 # At scale=10 the wavelet is stretched by a factor of 10, making it sensitive to lower frequencies in the signal. wavelet = \"gaus2\" # The Gaussian wavelets (\"gausP\" where P is an integer between 1 and and 8) correspond to the Pth order derivatives of the function sampling_period = ( 1 / target_sampling_frequency ) # Sampling period which is equal to 1/algorithm_target_fs coefficients , _ = pywt . cwt ( detrended_acceleration , np . arange ( 1 , scales + 1 ), wavelet , sampling_period ) desired_scale = 10 # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients wavelet_transform_result = coefficients [ desired_scale - 1 , :] # Applying Savitzky-Golay filter to further smoothen the wavelet transformed data window_length = 11 polynomial_order = 5 smoothed_wavelet_result = scipy . signal . savgol_filter ( wavelet_transform_result , window_length , polynomial_order ) # Perform continuous wavelet transform coefficients , _ = pywt . cwt ( smoothed_wavelet_result , np . arange ( 1 , scales + 1 ), wavelet , sampling_period ) desired_scale = 10 # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients further_smoothed_wavelet_result = coefficients [ desired_scale - 1 , :] # Smoothing the data using successive Gaussian filters from scipy.ndimage sigma_1 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt5,'gaussian',window); sigma_2 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt6,'gaussian',window); sigma_3 = 2.8936 # The sigma_1 = 2.8936 gives the same results when window=15 in the MATLAB fuction smoothdata(accN_filt7,'gaussian',window); sigma_4 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt8,'gaussian',window); sigma_values = [ sigma_1 , sigma_2 , sigma_3 , sigma_4 , ] # Vectors of sigma values for successive Gaussian filters first_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( further_smoothed_wavelet_result , sigma = sigma_values [ 0 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) second_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( first_gaussian_filtered_signal , sigma = sigma_values [ 1 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) third_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( second_gaussian_filtered_signal , sigma = sigma_values [ 2 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) fourth_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( third_gaussian_filtered_signal , sigma = sigma_values [ 3 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) # Use processed acceleration data for further analysis. detected_activity_signal = fourth_gaussian_filtered_signal # Compute the envelope of the processed acceleration data. envelope = [] envelope , _ = preprocessing . calculate_envelope_activity ( detected_activity_signal , int ( round ( target_sampling_frequency )), 1 , int ( round ( target_sampling_frequency )), 1 , ) # Initialize a list for walking bouts. walking_bouts = [] # Process alarm data to identify walking bouts. if envelope . size > 0 : non_zero_indices = np . where ( envelope > 0 )[ 0 ] # Find nonzeros index_ranges = preprocessing . find_consecutive_groups ( envelope > 0 ) for j in range ( len ( index_ranges )): if index_ranges [ j , 1 ] - index_ranges [ j , 0 ] <= 3 * target_sampling_frequency : envelope [ index_ranges [ j , 0 ] : index_ranges [ j , 1 ] + 1 ] = 0 else : walking_bouts . extend ( detected_activity_signal [ index_ranges [ j , 0 ] : index_ranges [ j , 1 ] + 1 ] ) # Convert walk_low_back list to a NumPy array walking_bouts_array = np . array ( walking_bouts ) # Find positive peaks in the walk_low_back_array positive_peak_indices , _ = scipy . signal . find_peaks ( walking_bouts_array , height = 0 ) # Get the corresponding y-axis data values for the positive peak positive_peaks = walking_bouts_array [ positive_peak_indices ] # Find negative peaks in the inverted walk_low_back array negative_peak_indices , _ = scipy . signal . find_peaks ( - walking_bouts_array ) # Get the corresponding y-axis data values for the positive peak negative_peaks = - walking_bouts_array [ negative_peak_indices ] # Convert pksn list to a NumPy array before using it in concatenation negative_peaks_array = np . array ( negative_peaks ) # Combine positive and negative peaks combined_peaks = np . concatenate (( positive_peaks , negative_peaks_array )) # Calculate the data adaptive threshold using the 5th percentile of the combined peaks threshold = np . percentile ( combined_peaks , 5 ) # Set f to sigDetActv selected_signal = detected_activity_signal else : threshold = ( 0.15 # If hilbert envelope fails to detect 'active', try version [1] ) selected_signal = smoothed_wavelet_result # Detect mid-swing peaks. min_peaks , max_peaks = preprocessing . find_local_min_max ( selected_signal , threshold ) # Find pulse trains in max_peaks and remove ones with steps less than 4 pulse_trains_max = preprocessing . identify_pulse_trains ( max_peaks ) # Access the fields of the struct-like array pulse_trains_max = [ train for train in pulse_trains_max if train [ \"steps\" ] >= 4 ] # Find pulse trains in min_peaks and remove ones with steps less than 4 pulse_trains_min = preprocessing . identify_pulse_trains ( min_peaks ) # Access the fields of the struct-like array pulse_trains_min = [ train for train in pulse_trains_min if train [ \"steps\" ] >= 4 ] # Convert t1 and t2 to sets and find their intersection walking_periods = preprocessing . find_interval_intersection ( preprocessing . convert_pulse_train_to_array ( pulse_trains_max ), preprocessing . convert_pulse_train_to_array ( pulse_trains_min ), ) if walking_periods is None : # Check if walking_periods is empty walking_bouts = [] MidSwing = [] else : walking_bouts , MidSwing = preprocessing . organize_and_pack_results ( walking_periods , max_peaks ) # Call the organize_and_pack_results function with walking_periods and MaxPeaks if walking_bouts : # Check if w is not empty walking_bouts [ 0 ][ \"start\" ] = max ( [ 1 , walking_bouts [ 0 ][ \"start\" ]] ) # Update the start value of the first element in w walking_bouts [ - 1 ][ \"end\" ] = min ( [ walking_bouts [ - 1 ][ \"end\" ], len ( detected_activity_signal )] ) # Update the end value of the last element in w walking_bouts_length = len ( walking_bouts ) # Calculate the length (size) of w filtered_walking_bouts = [] # Initialize an empty list w_new counter = 0 # Initialize a counter variable k for j in range ( walking_bouts_length ): # Loop through the range from 0 to n-1 if ( walking_bouts [ j ][ \"steps\" ] >= 5 ): # Check if the 'steps' field of the j-th element in w is greater than or equal to 5 counter += 1 # Increment the counter k filtered_walking_bouts . append ( { \"start\" : walking_bouts [ j ][ \"start\" ], \"end\" : walking_bouts [ j ][ \"end\" ]} ) # Add a new element to w_new with 'start' and 'end' fields from the j-th element in w walking_labels = np . zeros ( len ( detected_activity_signal ) ) # Initialize an array of zeros with the length of sigDetActv filtered_walking_bouts_length = len ( filtered_walking_bouts ) # Calculate the length (size) of w_new for j in range ( filtered_walking_bouts_length ): # Loop through the range from 0 to n-1 walking_labels [ filtered_walking_bouts [ j ][ \"start\" ] : filtered_walking_bouts [ j ][ \"end\" ] + 1 ] = 1 # Update elements in walking_labels to 1 between the 'start' and 'end' indices of the j-th element in w_new # Merge walking bouts if break less than 3 seconds ind_noWk = [] ind_noWk = preprocessing . find_consecutive_groups ( walking_labels == 0 ) if len ( ind_noWk ) > 0 : for j in range ( len ( ind_noWk )): if ind_noWk [ j , 1 ] - ind_noWk [ j , 0 ] <= target_sampling_frequency * 3 : walking_labels [ ind_noWk [ j , 0 ] : ind_noWk [ j , 1 ] + 1 ] = 1 ind_Wk = [] if np . any ( walking_labels == 1 ): ind_Wk = preprocessing . find_consecutive_groups ( walking_labels == 1 ) if len ( ind_Wk ) > 0 : GSD_Output = [] for j in range ( len ( ind_Wk )): GSD_Output . append ( { \"Start\" : ind_Wk [ j , 0 ] / target_sampling_frequency , \"End\" : ind_Wk [ j , 1 ] / target_sampling_frequency , \"fs\" : initial_sampling_frequency , } ) else : print ( \"No gait sequence(s) detected\" ) # Plot results if set to true if plot_results : plt . figure ( figsize = ( 10 , 6 )) plt . plot ( detected_activity_signal , linewidth = 3 ) plt . plot ( walking_labels , \"r\" , linewidth = 5 ) plt . title ( \"Detected Activity and Walking Labels\" , fontsize = 20 ) plt . xlabel ( \"Samples (40Hz)\" , fontsize = 20 ) plt . ylabel ( \"Amplitude\" , fontsize = 20 ) plt . legend ( [ \"Processed Acceleration Signal from Lowerback IMU Sensor\" , \"Detected Gait Sequences\" , ], fontsize = 16 , ) plt . grid ( True ) plt . xticks ( fontsize = 20 ) plt . yticks ( fontsize = 20 ) plt . show () return GSD_Output","title":"Modules"},{"location":"modules/#modules.gsd.GSDA.gsd_low_back_acc","text":"summary Perform Gait Sequence Detection (GSD) using low back accelerometer data. Parameters: Name Type Description Default imu_acceleration ndarray Input accelerometer data (N, 3) for x, y, and z axes. required sampling_frequency float Sampling frequency of the accelerometer data. required Returns: Name Type Description list A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency. Source code in ngmt\\modules\\gsd\\GSDA.pydef gsd_low_back_acc ( imu_acceleration , sampling_frequency , plot_results ): \"\"\"_summary_ Perform Gait Sequence Detection (GSD) using low back accelerometer data. Args: imu_acceleration (numpy.ndarray): Input accelerometer data (N, 3) for x, y, and z axes. sampling_frequency (float): Sampling frequency of the accelerometer data. Returns: list: A list of dictionaries containing gait sequence information, including start and end times, and sampling frequency. \"\"\" GSD_Output = {} # Calculate the norm of acceleration as acceleration_norm using x, y, and z components. acceleration_norm = np . sqrt ( imu_acceleration [:, 0 ] ** 2 + imu_acceleration [:, 1 ] ** 2 + imu_acceleration [:, 2 ] ** 2 ) # Resample acceleration_norm to target sampling frequency using resample_interpolate function. initial_sampling_frequency = ( sampling_frequency # Initial sampling frequency of the acceleration data ) target_sampling_frequency = ( 40 # Targeted sampling frequency of the acceleration data ) resampled_acceleration = preprocessing . resample_interpolate ( acceleration_norm , initial_sampling_frequency , target_sampling_frequency ) # Resampled data with 40Hz # Applying Savitzky-Golay filter to smoothen the resampled data with frequency of 40Hz window_length = 21 polynomial_order = 7 smoothed_acceleration = scipy . signal . savgol_filter ( resampled_acceleration , window_length , polynomial_order ) # Load FIR filter designed and apply for the low SNR, impaired, asymmetric, and slow gait filtering_file = scipy . io . loadmat ( \"C: \\\\ Users \\\\ Project \\\\ Desktop \\\\ Gait_Sequence \\\\ Mobilise-D-TVS-Recommended-Algorithms \\\\ GSDB \\\\ Library \\\\ FIR-2-3Hz-40.mat\" ) num = filtering_file [ \"Num\" ][ 0 , :] # Remove drifts using defined function in utls (RemoveDrift40Hz). # Define parameters of the filter numerator_coefficient = num denominator_coefficient = np . array ( [ 1.0 , ] ) detrended_acceleration = scipy . signal . filtfilt ( numerator_coefficient , denominator_coefficient , preprocessing . remove_40Hz_drift ( smoothed_acceleration ), ) # Perform the continuous wavelet transform on the filtered acceleration data accN_filt2 scales = 10 # At scale=10 the wavelet is stretched by a factor of 10, making it sensitive to lower frequencies in the signal. wavelet = \"gaus2\" # The Gaussian wavelets (\"gausP\" where P is an integer between 1 and and 8) correspond to the Pth order derivatives of the function sampling_period = ( 1 / target_sampling_frequency ) # Sampling period which is equal to 1/algorithm_target_fs coefficients , _ = pywt . cwt ( detrended_acceleration , np . arange ( 1 , scales + 1 ), wavelet , sampling_period ) desired_scale = 10 # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients wavelet_transform_result = coefficients [ desired_scale - 1 , :] # Applying Savitzky-Golay filter to further smoothen the wavelet transformed data window_length = 11 polynomial_order = 5 smoothed_wavelet_result = scipy . signal . savgol_filter ( wavelet_transform_result , window_length , polynomial_order ) # Perform continuous wavelet transform coefficients , _ = pywt . cwt ( smoothed_wavelet_result , np . arange ( 1 , scales + 1 ), wavelet , sampling_period ) desired_scale = 10 # Choose the desired scale you want to access (1 to scales) and extract it from the coefficients further_smoothed_wavelet_result = coefficients [ desired_scale - 1 , :] # Smoothing the data using successive Gaussian filters from scipy.ndimage sigma_1 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt5,'gaussian',window); sigma_2 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt6,'gaussian',window); sigma_3 = 2.8936 # The sigma_1 = 2.8936 gives the same results when window=15 in the MATLAB fuction smoothdata(accN_filt7,'gaussian',window); sigma_4 = 1.9038 # The sigma_1 = 1.9038 gives the same results when window=10 in the MATLAB fuction smoothdata(accN_filt8,'gaussian',window); sigma_values = [ sigma_1 , sigma_2 , sigma_3 , sigma_4 , ] # Vectors of sigma values for successive Gaussian filters first_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( further_smoothed_wavelet_result , sigma = sigma_values [ 0 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) second_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( first_gaussian_filtered_signal , sigma = sigma_values [ 1 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) third_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( second_gaussian_filtered_signal , sigma = sigma_values [ 2 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) fourth_gaussian_filtered_signal = scipy . ndimage . gaussian_filter ( third_gaussian_filtered_signal , sigma = sigma_values [ 3 ], order = 0 , output = None , mode = \"reflect\" , cval = 0.0 , truncate = 4.0 , radius = None , ) # Use processed acceleration data for further analysis. detected_activity_signal = fourth_gaussian_filtered_signal # Compute the envelope of the processed acceleration data. envelope = [] envelope , _ = preprocessing . calculate_envelope_activity ( detected_activity_signal , int ( round ( target_sampling_frequency )), 1 , int ( round ( target_sampling_frequency )), 1 , ) # Initialize a list for walking bouts. walking_bouts = [] # Process alarm data to identify walking bouts. if envelope . size > 0 : non_zero_indices = np . where ( envelope > 0 )[ 0 ] # Find nonzeros index_ranges = preprocessing . find_consecutive_groups ( envelope > 0 ) for j in range ( len ( index_ranges )): if index_ranges [ j , 1 ] - index_ranges [ j , 0 ] <= 3 * target_sampling_frequency : envelope [ index_ranges [ j , 0 ] : index_ranges [ j , 1 ] + 1 ] = 0 else : walking_bouts . extend ( detected_activity_signal [ index_ranges [ j , 0 ] : index_ranges [ j , 1 ] + 1 ] ) # Convert walk_low_back list to a NumPy array walking_bouts_array = np . array ( walking_bouts ) # Find positive peaks in the walk_low_back_array positive_peak_indices , _ = scipy . signal . find_peaks ( walking_bouts_array , height = 0 ) # Get the corresponding y-axis data values for the positive peak positive_peaks = walking_bouts_array [ positive_peak_indices ] # Find negative peaks in the inverted walk_low_back array negative_peak_indices , _ = scipy . signal . find_peaks ( - walking_bouts_array ) # Get the corresponding y-axis data values for the positive peak negative_peaks = - walking_bouts_array [ negative_peak_indices ] # Convert pksn list to a NumPy array before using it in concatenation negative_peaks_array = np . array ( negative_peaks ) # Combine positive and negative peaks combined_peaks = np . concatenate (( positive_peaks , negative_peaks_array )) # Calculate the data adaptive threshold using the 5th percentile of the combined peaks threshold = np . percentile ( combined_peaks , 5 ) # Set f to sigDetActv selected_signal = detected_activity_signal else : threshold = ( 0.15 # If hilbert envelope fails to detect 'active', try version [1] ) selected_signal = smoothed_wavelet_result # Detect mid-swing peaks. min_peaks , max_peaks = preprocessing . find_local_min_max ( selected_signal , threshold ) # Find pulse trains in max_peaks and remove ones with steps less than 4 pulse_trains_max = preprocessing . identify_pulse_trains ( max_peaks ) # Access the fields of the struct-like array pulse_trains_max = [ train for train in pulse_trains_max if train [ \"steps\" ] >= 4 ] # Find pulse trains in min_peaks and remove ones with steps less than 4 pulse_trains_min = preprocessing . identify_pulse_trains ( min_peaks ) # Access the fields of the struct-like array pulse_trains_min = [ train for train in pulse_trains_min if train [ \"steps\" ] >= 4 ] # Convert t1 and t2 to sets and find their intersection walking_periods = preprocessing . find_interval_intersection ( preprocessing . convert_pulse_train_to_array ( pulse_trains_max ), preprocessing . convert_pulse_train_to_array ( pulse_trains_min ), ) if walking_periods is None : # Check if walking_periods is empty walking_bouts = [] MidSwing = [] else : walking_bouts , MidSwing = preprocessing . organize_and_pack_results ( walking_periods , max_peaks ) # Call the organize_and_pack_results function with walking_periods and MaxPeaks if walking_bouts : # Check if w is not empty walking_bouts [ 0 ][ \"start\" ] = max ( [ 1 , walking_bouts [ 0 ][ \"start\" ]] ) # Update the start value of the first element in w walking_bouts [ - 1 ][ \"end\" ] = min ( [ walking_bouts [ - 1 ][ \"end\" ], len ( detected_activity_signal )] ) # Update the end value of the last element in w walking_bouts_length = len ( walking_bouts ) # Calculate the length (size) of w filtered_walking_bouts = [] # Initialize an empty list w_new counter = 0 # Initialize a counter variable k for j in range ( walking_bouts_length ): # Loop through the range from 0 to n-1 if ( walking_bouts [ j ][ \"steps\" ] >= 5 ): # Check if the 'steps' field of the j-th element in w is greater than or equal to 5 counter += 1 # Increment the counter k filtered_walking_bouts . append ( { \"start\" : walking_bouts [ j ][ \"start\" ], \"end\" : walking_bouts [ j ][ \"end\" ]} ) # Add a new element to w_new with 'start' and 'end' fields from the j-th element in w walking_labels = np . zeros ( len ( detected_activity_signal ) ) # Initialize an array of zeros with the length of sigDetActv filtered_walking_bouts_length = len ( filtered_walking_bouts ) # Calculate the length (size) of w_new for j in range ( filtered_walking_bouts_length ): # Loop through the range from 0 to n-1 walking_labels [ filtered_walking_bouts [ j ][ \"start\" ] : filtered_walking_bouts [ j ][ \"end\" ] + 1 ] = 1 # Update elements in walking_labels to 1 between the 'start' and 'end' indices of the j-th element in w_new # Merge walking bouts if break less than 3 seconds ind_noWk = [] ind_noWk = preprocessing . find_consecutive_groups ( walking_labels == 0 ) if len ( ind_noWk ) > 0 : for j in range ( len ( ind_noWk )): if ind_noWk [ j , 1 ] - ind_noWk [ j , 0 ] <= target_sampling_frequency * 3 : walking_labels [ ind_noWk [ j , 0 ] : ind_noWk [ j , 1 ] + 1 ] = 1 ind_Wk = [] if np . any ( walking_labels == 1 ): ind_Wk = preprocessing . find_consecutive_groups ( walking_labels == 1 ) if len ( ind_Wk ) > 0 : GSD_Output = [] for j in range ( len ( ind_Wk )): GSD_Output . append ( { \"Start\" : ind_Wk [ j , 0 ] / target_sampling_frequency , \"End\" : ind_Wk [ j , 1 ] / target_sampling_frequency , \"fs\" : initial_sampling_frequency , } ) else : print ( \"No gait sequence(s) detected\" ) # Plot results if set to true if plot_results : plt . figure ( figsize = ( 10 , 6 )) plt . plot ( detected_activity_signal , linewidth = 3 ) plt . plot ( walking_labels , \"r\" , linewidth = 5 ) plt . title ( \"Detected Activity and Walking Labels\" , fontsize = 20 ) plt . xlabel ( \"Samples (40Hz)\" , fontsize = 20 ) plt . ylabel ( \"Amplitude\" , fontsize = 20 ) plt . legend ( [ \"Processed Acceleration Signal from Lowerback IMU Sensor\" , \"Detected Gait Sequences\" , ], fontsize = 16 , ) plt . grid ( True ) plt . xticks ( fontsize = 20 ) plt . yticks ( fontsize = 20 ) plt . show () return GSD_Output","title":"gsd_low_back_acc()"},{"location":"utils/","text":"This part of the project documentation focuses on the avaliable utilities . calculate_envelope_activity ( input_signal , smooth_window , threshold_style , duration , plot_results ) summary Calculate envelope-based activity detection using the Hilbert transform. This function analyzes an input signal input_signal to detect periods of activity based on the signal's envelope. It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an adaptive threshold to identify active regions. Args: input_signal (array_like): The input signal. smooth_window (int): Window length for smoothing the envelope (default is 20). threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1). duration (int): Minimum duration of activity to be detected (default is 20). plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1). tuple(ndarray, ndarray): A tuple containing: - alarm (ndarray): Vector indicating active parts of the signal. - env (ndarray): Smoothed envelope of the signal. Source code in ngmt\\utils\\preprocessing.pydef calculate_envelope_activity ( input_signal , smooth_window , threshold_style , duration , plot_results ): \"\"\"_summary_ Calculate envelope-based activity detection using the Hilbert transform. This function analyzes an input signal `input_signal` to detect periods of activity based on the signal's envelope. It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an adaptive threshold to identify active regions. Args: input_signal (array_like): The input signal. smooth_window (int): Window length for smoothing the envelope (default is 20). threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1). duration (int): Minimum duration of activity to be detected (default is 20). plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1). Returns: tuple(ndarray, ndarray): A tuple containing: - alarm (ndarray): Vector indicating active parts of the signal. - env (ndarray): Smoothed envelope of the signal. \"\"\" # Input handling if len ( locals ()) < 5 : # If there is < 5 inputs. plot_results = 1 # Default value if len ( locals ()) < 4 : # If there is < 4 inputs. duration = 20 # Default value if len ( locals ()) < 3 : # If there is < 3 inputs. threshold_style = 1 # Default 1, means it is done automatically if len ( locals ()) < 2 : # If there is < 2 inputs. smooth_window = 20 # Default value for smoothing length if len ( locals ()) < 1 : # If there is < 1 inputs. v = np . tile ( np . concatenate ( ( 0.1 * np . ones (( 200 , 1 )), np . ones (( 100 , 1 ))) ), ( 10 , 1 ), ) # Generate true variance profile input_signal = np . sqrt ( v ) * np . random . randn ( * v . shape ) # Calculate the analytical signal and get the envelope input_signal = ( input_signal . flatten () ) # Return a copy of the preprocessed data into one dimension. # Compute the analytic signal, using the Hilbert transform form scipy.signal. analytic = scipy . signal . hilbert ( input_signal ) env = np . abs ( analytic ) # Compute the envelope of the analytic signal. # Take the moving average of the analytic signal env = scipy . signal . convolve ( env , np . ones ( smooth_window ) / smooth_window , mode = \"full\" ) # Returns the discrete, linear convolution of two one-dimensional sequences. env = env - np . mean ( env ) # Remove the offset by subtracting the mean of 'env' env = env / np . max ( env ) # Normalize the 'env' by dividing by its maximum value # Threshold the signal if threshold_style == 0 : hg = plt . figure () plt . plot ( env ) plt . title ( \"Select a threshold on the graph\" ) _ , THR_SIG = plt . ginput ( 1 ) plt . close ( hg ) elif threshold_style == 1 : THR_SIG = 4 * np . mean ( env ) # Set noise and signal levels noise = np . mean ( env ) * ( 1 / 3 ) # Noise level: Set an initial estimate of the noise level threshold = np . mean ( env ) # Signal level: It's used as a reference to distinguish between the background noise and the actual signal activity. # Initialize Buffers thres_buf = np . zeros ( len ( env ) - duration ) # This buffer stores values related to a threshold. noise_buf = np . zeros ( len ( env ) - duration ) # This buffer stores values related to the noise. THR_buf = np . zeros ( len ( env )) # This buffer stores threshold values. alarm = np . zeros_like ( env ) # This buffer tracks alarm-related information. h = 1 for i in range ( len ( env ) - duration ): if np . all ( env [ i : i + duration ] > THR_SIG ): alarm [ i ] = np . max ( env ) # If the current window of data surpasses the threshold, set an alarm. threshold = 0.1 * np . mean ( env [ i : i + duration ] ) # Set a new threshold based on the mean of the current window. h += 1 else : # Update noise if np . mean ( env [ i : i + duration ]) < THR_SIG : noise = np . mean ( env [ i : i + duration ] ) # Update the noise value based on the mean of the current window. else : if len ( noise_buf ) > 0 : noise = np . mean ( noise_buf ) # If available, use the mean of noise buffer to update the noise. thres_buf [ i ] = threshold # Store the threshold value in the threshold buffer. noise_buf [ i ] = noise # Store the noise value in the noise buffer. # Update threshold if h > 1 : THR_SIG = noise + 0.50 * ( np . abs ( threshold - noise ) ) # Update the threshold using noise and threshold values. THR_buf [ i ] = THR_SIG # Store the updated threshold value in the threshold buffer. if plot_results == 1 : plt . figure () ax = plt . subplot ( 2 , 1 , 1 ) plt . plot ( input_signal ) plt . plot ( np . where ( alarm != 0 , np . max ( input_signal ), 0 ), \"r\" , linewidth = 2.5 ) plt . plot ( THR_buf , \"--g\" , linewidth = 2.5 ) plt . title ( \"Raw Signal and detected Onsets of activity\" ) plt . legend ( [ \"Raw Signal\" , \"Detected Activity in Signal\" , \"Adaptive Threshold\" ], loc = \"upper left\" , ) plt . grid ( True ) plt . axis ( \"tight\" ) ax2 = plt . subplot ( 2 , 1 , 2 ) plt . plot ( env ) plt . plot ( THR_buf , \"--g\" , linewidth = 2.5 ) plt . plot ( thres_buf , \"--r\" , linewidth = 2 ) plt . plot ( noise_buf , \"--k\" , linewidth = 2 ) plt . title ( \"Smoothed Envelope of the signal (Hilbert Transform)\" ) plt . legend ( [ \"Smoothed Envelope of the signal (Hilbert Transform)\" , \"Adaptive Threshold\" , \"Activity level\" , \"Noise Level\" , ] ) plt . grid ( True ) plt . axis ( \"tight\" ) plt . tight_layout () plt . show () return alarm , env convert_pulse_train_to_array ( pulse_train_list ) summary Convert a List of Pulse Train Dictionaries to a 2D Array. This function takes a list of pulse train dictionaries and converts it into a 2D array. Each dictionary is expected to have keys 'start' and 'end', and the function creates an array where each row corresponds to a dictionary with the 'start' value in the first column and the 'end' value in the second column. Parameters: Name Type Description Default pulse_train_list list A list of dictionaries containing pulse train information. required Returns: Type Description numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value in the first column and the 'end' value in the second column. Source code in ngmt\\utils\\preprocessing.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 def convert_pulse_train_to_array ( pulse_train_list ): \"\"\"_summary_ Convert a List of Pulse Train Dictionaries to a 2D Array. This function takes a list of pulse train dictionaries and converts it into a 2D array. Each dictionary is expected to have keys 'start' and 'end', and the function creates an array where each row corresponds to a dictionary with the 'start' value in the first column and the 'end' value in the second column. Args: pulse_train_list (list): A list of dictionaries containing pulse train information. Returns: numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value in the first column and the 'end' value in the second column. \"\"\" array_representation = np . zeros (( len ( pulse_train_list ), 2 ), dtype = np . uint64 ) for i , pulse_train_dict in enumerate ( pulse_train_list ): array_representation [ i , 0 ] = pulse_train_dict [ \"start\" ] # Access the 'start' key within the dictionary array_representation [ i , 1 ] = pulse_train_dict [ \"end\" ] # Access the 'end' key within the dictionary return array_representation find_consecutive_groups ( input_array ) summary Find consecutive groups of non-zero values in an input array. This function takes an input array input_array , converts it to a column vector, and identifies consecutive groups of non-zero values. It returns a 2D array where each row represents a group, with the first column containing the start index of the group and the second column containing the end index of the group. Args: input_array (ndarray): The input array. ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values. The first column contains the start index of the group, and the second column contains the end index. Source code in ngmt\\utils\\preprocessing.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def find_consecutive_groups ( input_array ): \"\"\"_summary_ Find consecutive groups of non-zero values in an input array. This function takes an input array `input_array`, converts it to a column vector, and identifies consecutive groups of non-zero values. It returns a 2D array where each row represents a group, with the first column containing the start index of the group and the second column containing the end index of the group. Args: input_array (ndarray): The input array. Returns: ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values. The first column contains the start index of the group, and the second column contains the end index. \"\"\" temp = np . where ( input_array )[ 0 ] # find indices of non-zeros idx = np . where ( np . diff ( temp ) > 1 )[ 0 ] # find where the difference between indices is greater than 1 ind = np . zeros (( len ( idx ) + 1 , 2 ), dtype = int ) # initialize the output array ind [:, 1 ] = temp [ np . append ( idx , - 1 )] # set the second column ind [:, 0 ] = temp [ np . insert ( idx + 1 , 0 , 0 )] # set the first column return ind find_interval_intersection ( set_a , set_b ) summary Find the Intersection of Two Sets of Intervals. Given two sets of intervals, this function computes their intersection and returns a new set of intervals representing the overlapping regions. Parameters: Name Type Description Default set_a ndarray The first set of intervals, where each row represents an interval with two values indicating the start and end points. required set_b ndarray The second set of intervals, with the same structure as set_a . required Returns: Type Description numpy.ndarray: A new set of intervals representing the intersection of intervals from set_a and set_b . Source code in ngmt\\utils\\preprocessing.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 def find_interval_intersection ( set_a , set_b ): \"\"\"_summary_ Find the Intersection of Two Sets of Intervals. Given two sets of intervals, this function computes their intersection and returns a new set of intervals representing the overlapping regions. Args: set_a (numpy.ndarray): The first set of intervals, where each row represents an interval with two values indicating the start and end points. set_b (numpy.ndarray): The second set of intervals, with the same structure as `set_a`. Returns: numpy.ndarray: A new set of intervals representing the intersection of intervals from `set_a` and `set_b`. \"\"\" num_intervals_a = set_a . shape [ 0 ] num_intervals_b = set_b . shape [ 0 ] intersection_intervals = [] if num_intervals_a == 0 or num_intervals_b == 0 : return np . array ( intersection_intervals ) index_a = 0 index_b = 0 state = 3 while index_a < num_intervals_a and index_b < num_intervals_b : if state == 1 : if set_a [ index_a , 1 ] < set_b [ index_b , 0 ]: index_a += 1 state = 3 elif set_a [ index_a , 1 ] < set_b [ index_b , 1 ]: intersection_intervals . append ([ set_b [ index_b , 0 ], set_a [ index_a , 1 ]]) index_a += 1 state = 2 else : intersection_intervals . append ( set_b [ index_b , :]) index_b += 1 elif state == 2 : if set_b [ index_b , 1 ] < set_a [ index_a , 0 ]: index_b += 1 state = 3 elif set_b [ index_b , 1 ] < set_a [ index_a , 1 ]: intersection_intervals . append ([ set_a [ index_a , 0 ], set_b [ index_b , 1 ]]) index_b += 1 state = 1 else : intersection_intervals . append ( set_a [ index_a , :]) index_a += 1 elif state == 3 : if set_a [ index_a , 0 ] < set_b [ index_b , 0 ]: state = 1 else : state = 2 return np . array ( intersection_intervals ) find_local_min_max ( signal , threshold = None ) summary Find Local Minima and Maxima in a Given Signal. This function takes an input signal and identifies the indices of local minima and maxima. Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold. Parameters: Name Type Description Default signal ndarray The input signal. required threshold float or None Threshold for filtering out minima and maxima below and above this value, respectively. None Returns: Name Type Description tuple ( ndarray , ndarray ) A tuple containing two arrays: - minima_indices: Indices of local minima in the signal. - maxima_indices: Indices of local maxima in the signal. Source code in ngmt\\utils\\preprocessing.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 def find_local_min_max ( signal , threshold = None ): \"\"\"_summary_ Find Local Minima and Maxima in a Given Signal. This function takes an input signal and identifies the indices of local minima and maxima. Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold. Args: signal (numpy.ndarray): The input signal. threshold (float or None, optional): Threshold for filtering out minima and maxima below and above this value, respectively. Returns: tuple(numpy.ndarray, numpy.ndarray): A tuple containing two arrays: - minima_indices: Indices of local minima in the signal. - maxima_indices: Indices of local maxima in the signal. \"\"\" signal_diff = np . diff ( signal ) zero_crossings = np . where ( signal_diff [ 1 :] * signal_diff [: - 1 ] <= 0 )[ 0 ] zero_crossings = zero_crossings + 1 minima_indices = zero_crossings [ signal_diff [ zero_crossings ] >= 0 ] maxima_indices = zero_crossings [ signal_diff [ zero_crossings ] < 0 ] if threshold is not None : maxima_indices = maxima_indices [ signal [ maxima_indices ] > threshold ] minima_indices = minima_indices [ signal [ minima_indices ] < - threshold ] return minima_indices , maxima_indices identify_pulse_trains ( signal ) summary Identify Pulse Trains in a Given Signal. This function takes an input signal and detects pulse trains within the signal. A pulse train is identified as a sequence of values with small intervals between adjacent values. Parameters: Name Type Description Default signal ndarray The input signal. required Returns: Name Type Description list A list of dictionaries, each containing information about a detected pulse train. Each dictionary has the following keys: - 'start': The index of the first value in the pulse train. - 'end': The index of the last value in the pulse train. - 'steps': The number of steps in the pulse train. Source code in ngmt\\utils\\preprocessing.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 def identify_pulse_trains ( signal ): \"\"\"_summary_ Identify Pulse Trains in a Given Signal. This function takes an input signal and detects pulse trains within the signal. A pulse train is identified as a sequence of values with small intervals between adjacent values. Args: signal (numpy.ndarray): The input signal. Returns: list: A list of dictionaries, each containing information about a detected pulse train. Each dictionary has the following keys: - 'start': The index of the first value in the pulse train. - 'end': The index of the last value in the pulse train. - 'steps': The number of steps in the pulse train. \"\"\" pulse_trains = [] walking_flag = 0 threshold = 3.5 * 40 pulse_count = 0 if len ( signal ) > 2 : for i in range ( len ( signal ) - 1 ): if signal [ i + 1 ] - signal [ i ] < threshold : if walking_flag == 0 : pulse_trains . append ({ \"start\" : signal [ i ], \"steps\" : 1 }) pulse_count += 1 walking_flag = 1 else : pulse_trains [ pulse_count - 1 ][ \"steps\" ] += 1 threshold = ( 1.5 * 40 + ( signal [ i ] - pulse_trains [ pulse_count - 1 ][ \"start\" ]) / pulse_trains [ pulse_count - 1 ][ \"steps\" ] ) else : if walking_flag == 1 : pulse_trains [ pulse_count - 1 ][ \"end\" ] = signal [ i - 1 ] walking_flag = 0 threshold = 3.5 * 40 if walking_flag == 1 : if signal [ - 1 ] - signal [ - 2 ] < threshold : pulse_trains [ - 1 ][ \"end\" ] = signal [ - 1 ] pulse_trains [ - 1 ][ \"steps\" ] += 1 else : pulse_trains [ - 1 ][ \"end\" ] = signal [ - 2 ] return pulse_trains organize_and_pack_results ( walking_periods , peak_steps ) Organize and Pack Walking Results with Associated Peak Steps. Given lists of walking periods and peak step indices, this function organizes and packs the results into a more structured format. It calculates the number of steps in each walking period, associates peak steps with their corresponding walking periods, and extends the duration of walking periods based on step time. The function also checks for overlapping walking periods and merges them. Parameters: Name Type Description Default walking_periods list List of tuples representing walking periods, where each tuple contains the start and end indices. required peak_steps list List of peak step indices. required Returns: Name Type Description tuple ( list , list ) A tuple containing two elements: - A list of dictionaries representing organized walking results, each dictionary contains: - 'start': Start index of the walking period. - 'end': End index of the walking period. - 'steps': Number of steps within the walking period. - 'mid_swing': List of peak step indices within the walking period. - A list of sorted peak step indices across all walking periods. Source code in ngmt\\utils\\preprocessing.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 def organize_and_pack_results ( walking_periods , peak_steps ): \"\"\"Organize and Pack Walking Results with Associated Peak Steps. Given lists of walking periods and peak step indices, this function organizes and packs the results into a more structured format. It calculates the number of steps in each walking period, associates peak steps with their corresponding walking periods, and extends the duration of walking periods based on step time. The function also checks for overlapping walking periods and merges them. Args: walking_periods (list): List of tuples representing walking periods, where each tuple contains the start and end indices. peak_steps (list): List of peak step indices. Returns: tuple(list, list): A tuple containing two elements: - A list of dictionaries representing organized walking results, each dictionary contains: - 'start': Start index of the walking period. - 'end': End index of the walking period. - 'steps': Number of steps within the walking period. - 'mid_swing': List of peak step indices within the walking period. - A list of sorted peak step indices across all walking periods. \"\"\" num_periods = len ( walking_periods ) organized_results = [ { \"start\" : walking_periods [ i ][ 0 ], \"end\" : walking_periods [ i ][ 1 ], \"steps\" : 0 , \"mid_swing\" : [], } for i in range ( num_periods ) ] all_mid_swing = [] for i in range ( num_periods ): steps_within_period = [ p for p in peak_steps if organized_results [ i ][ \"start\" ] <= p <= organized_results [ i ][ \"end\" ] ] organized_results [ i ][ \"steps\" ] = len ( steps_within_period ) organized_results [ i ][ \"mid_swing\" ] = steps_within_period all_mid_swing . extend ( steps_within_period ) # Calculate step time based on detected peak steps if len ( steps_within_period ) > 2 : step_time = sum ( [ steps_within_period [ j + 1 ] - steps_within_period [ j ] for j in range ( len ( steps_within_period ) - 1 ) ] ) / ( len ( steps_within_period ) - 1 ) organized_results [ i ][ \"start\" ] = int ( organized_results [ i ][ \"start\" ] - 1.5 * step_time / 2 ) organized_results [ i ][ \"end\" ] = int ( organized_results [ i ][ \"end\" ] + 1.5 * step_time / 2 ) all_mid_swing . sort () # Check for overlapping walking periods and merge them i = 0 while i < num_periods - 1 : if organized_results [ i ][ \"end\" ] >= organized_results [ i + 1 ][ \"start\" ]: organized_results [ i ][ \"end\" ] = organized_results [ i + 1 ][ \"end\" ] organized_results [ i ][ \"steps\" ] += organized_results [ i + 1 ][ \"steps\" ] organized_results [ i ][ \"mid_swing\" ] . extend ( organized_results [ i + 1 ][ \"mid_swing\" ] ) organized_results . pop ( i + 1 ) num_periods -= 1 else : i += 1 return organized_results , all_mid_swing remove_40Hz_drift ( signal ) summary Remove 40Hz drift from a signal using a high-pass filter. This function applies a high-pass filter to remove low-frequency drift at 40Hz from the input signal signal . Args: signal (array_like): The input signal. Returns: filtered_signal (ndarray): The filtered signal with removed drift. Source code in ngmt\\utils\\preprocessing.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def remove_40Hz_drift ( signal ): \"\"\"_summary_ Remove 40Hz drift from a signal using a high-pass filter. This function applies a high-pass filter to remove low-frequency drift at 40Hz from the input signal `signal`. Args: signal (array_like): The input signal. Returns: filtered_signal (ndarray): The filtered signal with removed drift. \"\"\" numerator_coefficient = np . array ( [ 1 , - 1 ] ) # The numerator coefficient vector of the filter. denominator_coefficient = np . array ( [ 1 , - 0.9748 ] ) # The denominator coefficient vector of the filter. filtered_signal = scipy . signal . filtfilt ( numerator_coefficient , denominator_coefficient , signal , axis = 0 , padtype = \"odd\" , padlen = 3 * ( max ( len ( numerator_coefficient ), len ( denominator_coefficient )) - 1 ), ) return filtered_signal resample_interpolate ( input_signal , initial_sampling_rate , target_sampling_rate ) summary Resample and interpolate a signal to a new sampling rate. This function takes a signal input_signal sampled at an initial sampling rate initial_sampling_rate and resamples it to a new sampling rate target_sampling_rate using linear interpolation. Args: input_signal (array_like): The input signal. initial_sampling_rate (float): The initial sampling rate of the input signal. target_sampling_rate (float): The desired sampling rate for the output signal. Returns: resampled_signal (array_like): The resampled and interpolated signal. Source code in ngmt\\utils\\preprocessing.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def resample_interpolate ( input_signal , initial_sampling_rate , target_sampling_rate ): \"\"\"_summary_ Resample and interpolate a signal to a new sampling rate. This function takes a signal `input_signal` sampled at an initial sampling rate `initial_sampling_rate` and resamples it to a new sampling rate `target_sampling_rate` using linear interpolation. Args: input_signal (array_like): The input signal. initial_sampling_rate (float): The initial sampling rate of the input signal. target_sampling_rate (float): The desired sampling rate for the output signal. Returns: resampled_signal (array_like): The resampled and interpolated signal. \"\"\" recording_time = len ( input_signal ) x = np . arange ( 1 , recording_time + 1 ) xq = np . arange ( 1 , recording_time + 1 , initial_sampling_rate / target_sampling_rate ) interpolator = scipy . interpolate . interp1d ( x , input_signal , kind = \"linear\" , axis = 0 , fill_value = \"extrapolate\" ) # Create an interpolation function and apply it to the data resampled_signal = interpolator ( xq ) return resampled_signal","title":"Utilities"},{"location":"utils/#utils.preprocessing.calculate_envelope_activity","text":"summary Calculate envelope-based activity detection using the Hilbert transform. This function analyzes an input signal input_signal to detect periods of activity based on the signal's envelope. It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an adaptive threshold to identify active regions. Args: input_signal (array_like): The input signal. smooth_window (int): Window length for smoothing the envelope (default is 20). threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1). duration (int): Minimum duration of activity to be detected (default is 20). plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1). tuple(ndarray, ndarray): A tuple containing: - alarm (ndarray): Vector indicating active parts of the signal. - env (ndarray): Smoothed envelope of the signal. Source code in ngmt\\utils\\preprocessing.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def calculate_envelope_activity ( input_signal , smooth_window , threshold_style , duration , plot_results ): \"\"\"_summary_ Calculate envelope-based activity detection using the Hilbert transform. This function analyzes an input signal `input_signal` to detect periods of activity based on the signal's envelope. It calculates the analytical signal using the Hilbert transform, smoothes the envelope, and applies an adaptive threshold to identify active regions. Args: input_signal (array_like): The input signal. smooth_window (int): Window length for smoothing the envelope (default is 20). threshold_style (int): Threshold selection style: 0 for manual, 1 for automatic (default is 1). duration (int): Minimum duration of activity to be detected (default is 20). plot_results (int): Set to 1 for plotting results, 0 otherwise (default is 1). Returns: tuple(ndarray, ndarray): A tuple containing: - alarm (ndarray): Vector indicating active parts of the signal. - env (ndarray): Smoothed envelope of the signal. \"\"\" # Input handling if len ( locals ()) < 5 : # If there is < 5 inputs. plot_results = 1 # Default value if len ( locals ()) < 4 : # If there is < 4 inputs. duration = 20 # Default value if len ( locals ()) < 3 : # If there is < 3 inputs. threshold_style = 1 # Default 1, means it is done automatically if len ( locals ()) < 2 : # If there is < 2 inputs. smooth_window = 20 # Default value for smoothing length if len ( locals ()) < 1 : # If there is < 1 inputs. v = np . tile ( np . concatenate ( ( 0.1 * np . ones (( 200 , 1 )), np . ones (( 100 , 1 ))) ), ( 10 , 1 ), ) # Generate true variance profile input_signal = np . sqrt ( v ) * np . random . randn ( * v . shape ) # Calculate the analytical signal and get the envelope input_signal = ( input_signal . flatten () ) # Return a copy of the preprocessed data into one dimension. # Compute the analytic signal, using the Hilbert transform form scipy.signal. analytic = scipy . signal . hilbert ( input_signal ) env = np . abs ( analytic ) # Compute the envelope of the analytic signal. # Take the moving average of the analytic signal env = scipy . signal . convolve ( env , np . ones ( smooth_window ) / smooth_window , mode = \"full\" ) # Returns the discrete, linear convolution of two one-dimensional sequences. env = env - np . mean ( env ) # Remove the offset by subtracting the mean of 'env' env = env / np . max ( env ) # Normalize the 'env' by dividing by its maximum value # Threshold the signal if threshold_style == 0 : hg = plt . figure () plt . plot ( env ) plt . title ( \"Select a threshold on the graph\" ) _ , THR_SIG = plt . ginput ( 1 ) plt . close ( hg ) elif threshold_style == 1 : THR_SIG = 4 * np . mean ( env ) # Set noise and signal levels noise = np . mean ( env ) * ( 1 / 3 ) # Noise level: Set an initial estimate of the noise level threshold = np . mean ( env ) # Signal level: It's used as a reference to distinguish between the background noise and the actual signal activity. # Initialize Buffers thres_buf = np . zeros ( len ( env ) - duration ) # This buffer stores values related to a threshold. noise_buf = np . zeros ( len ( env ) - duration ) # This buffer stores values related to the noise. THR_buf = np . zeros ( len ( env )) # This buffer stores threshold values. alarm = np . zeros_like ( env ) # This buffer tracks alarm-related information. h = 1 for i in range ( len ( env ) - duration ): if np . all ( env [ i : i + duration ] > THR_SIG ): alarm [ i ] = np . max ( env ) # If the current window of data surpasses the threshold, set an alarm. threshold = 0.1 * np . mean ( env [ i : i + duration ] ) # Set a new threshold based on the mean of the current window. h += 1 else : # Update noise if np . mean ( env [ i : i + duration ]) < THR_SIG : noise = np . mean ( env [ i : i + duration ] ) # Update the noise value based on the mean of the current window. else : if len ( noise_buf ) > 0 : noise = np . mean ( noise_buf ) # If available, use the mean of noise buffer to update the noise. thres_buf [ i ] = threshold # Store the threshold value in the threshold buffer. noise_buf [ i ] = noise # Store the noise value in the noise buffer. # Update threshold if h > 1 : THR_SIG = noise + 0.50 * ( np . abs ( threshold - noise ) ) # Update the threshold using noise and threshold values. THR_buf [ i ] = THR_SIG # Store the updated threshold value in the threshold buffer. if plot_results == 1 : plt . figure () ax = plt . subplot ( 2 , 1 , 1 ) plt . plot ( input_signal ) plt . plot ( np . where ( alarm != 0 , np . max ( input_signal ), 0 ), \"r\" , linewidth = 2.5 ) plt . plot ( THR_buf , \"--g\" , linewidth = 2.5 ) plt . title ( \"Raw Signal and detected Onsets of activity\" ) plt . legend ( [ \"Raw Signal\" , \"Detected Activity in Signal\" , \"Adaptive Threshold\" ], loc = \"upper left\" , ) plt . grid ( True ) plt . axis ( \"tight\" ) ax2 = plt . subplot ( 2 , 1 , 2 ) plt . plot ( env ) plt . plot ( THR_buf , \"--g\" , linewidth = 2.5 ) plt . plot ( thres_buf , \"--r\" , linewidth = 2 ) plt . plot ( noise_buf , \"--k\" , linewidth = 2 ) plt . title ( \"Smoothed Envelope of the signal (Hilbert Transform)\" ) plt . legend ( [ \"Smoothed Envelope of the signal (Hilbert Transform)\" , \"Adaptive Threshold\" , \"Activity level\" , \"Noise Level\" , ] ) plt . grid ( True ) plt . axis ( \"tight\" ) plt . tight_layout () plt . show () return alarm , env","title":"calculate_envelope_activity()"},{"location":"utils/#utils.preprocessing.convert_pulse_train_to_array","text":"summary Convert a List of Pulse Train Dictionaries to a 2D Array. This function takes a list of pulse train dictionaries and converts it into a 2D array. Each dictionary is expected to have keys 'start' and 'end', and the function creates an array where each row corresponds to a dictionary with the 'start' value in the first column and the 'end' value in the second column. Parameters: Name Type Description Default pulse_train_list list A list of dictionaries containing pulse train information. required Returns: Type Description numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value in the first column and the 'end' value in the second column. Source code in ngmt\\utils\\preprocessing.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 def convert_pulse_train_to_array ( pulse_train_list ): \"\"\"_summary_ Convert a List of Pulse Train Dictionaries to a 2D Array. This function takes a list of pulse train dictionaries and converts it into a 2D array. Each dictionary is expected to have keys 'start' and 'end', and the function creates an array where each row corresponds to a dictionary with the 'start' value in the first column and the 'end' value in the second column. Args: pulse_train_list (list): A list of dictionaries containing pulse train information. Returns: numpy.ndarray: A 2D array where each row represents a pulse train with the 'start' value in the first column and the 'end' value in the second column. \"\"\" array_representation = np . zeros (( len ( pulse_train_list ), 2 ), dtype = np . uint64 ) for i , pulse_train_dict in enumerate ( pulse_train_list ): array_representation [ i , 0 ] = pulse_train_dict [ \"start\" ] # Access the 'start' key within the dictionary array_representation [ i , 1 ] = pulse_train_dict [ \"end\" ] # Access the 'end' key within the dictionary return array_representation","title":"convert_pulse_train_to_array()"},{"location":"utils/#utils.preprocessing.find_consecutive_groups","text":"summary Find consecutive groups of non-zero values in an input array. This function takes an input array input_array , converts it to a column vector, and identifies consecutive groups of non-zero values. It returns a 2D array where each row represents a group, with the first column containing the start index of the group and the second column containing the end index of the group. Args: input_array (ndarray): The input array. ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values. The first column contains the start index of the group, and the second column contains the end index. Source code in ngmt\\utils\\preprocessing.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def find_consecutive_groups ( input_array ): \"\"\"_summary_ Find consecutive groups of non-zero values in an input array. This function takes an input array `input_array`, converts it to a column vector, and identifies consecutive groups of non-zero values. It returns a 2D array where each row represents a group, with the first column containing the start index of the group and the second column containing the end index of the group. Args: input_array (ndarray): The input array. Returns: ind (ndarray): A 2D array where each row represents a group of consecutive non-zero values. The first column contains the start index of the group, and the second column contains the end index. \"\"\" temp = np . where ( input_array )[ 0 ] # find indices of non-zeros idx = np . where ( np . diff ( temp ) > 1 )[ 0 ] # find where the difference between indices is greater than 1 ind = np . zeros (( len ( idx ) + 1 , 2 ), dtype = int ) # initialize the output array ind [:, 1 ] = temp [ np . append ( idx , - 1 )] # set the second column ind [:, 0 ] = temp [ np . insert ( idx + 1 , 0 , 0 )] # set the first column return ind","title":"find_consecutive_groups()"},{"location":"utils/#utils.preprocessing.find_interval_intersection","text":"summary Find the Intersection of Two Sets of Intervals. Given two sets of intervals, this function computes their intersection and returns a new set of intervals representing the overlapping regions. Parameters: Name Type Description Default set_a ndarray The first set of intervals, where each row represents an interval with two values indicating the start and end points. required set_b ndarray The second set of intervals, with the same structure as set_a . required Returns: Type Description numpy.ndarray: A new set of intervals representing the intersection of intervals from set_a and set_b . Source code in ngmt\\utils\\preprocessing.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 def find_interval_intersection ( set_a , set_b ): \"\"\"_summary_ Find the Intersection of Two Sets of Intervals. Given two sets of intervals, this function computes their intersection and returns a new set of intervals representing the overlapping regions. Args: set_a (numpy.ndarray): The first set of intervals, where each row represents an interval with two values indicating the start and end points. set_b (numpy.ndarray): The second set of intervals, with the same structure as `set_a`. Returns: numpy.ndarray: A new set of intervals representing the intersection of intervals from `set_a` and `set_b`. \"\"\" num_intervals_a = set_a . shape [ 0 ] num_intervals_b = set_b . shape [ 0 ] intersection_intervals = [] if num_intervals_a == 0 or num_intervals_b == 0 : return np . array ( intersection_intervals ) index_a = 0 index_b = 0 state = 3 while index_a < num_intervals_a and index_b < num_intervals_b : if state == 1 : if set_a [ index_a , 1 ] < set_b [ index_b , 0 ]: index_a += 1 state = 3 elif set_a [ index_a , 1 ] < set_b [ index_b , 1 ]: intersection_intervals . append ([ set_b [ index_b , 0 ], set_a [ index_a , 1 ]]) index_a += 1 state = 2 else : intersection_intervals . append ( set_b [ index_b , :]) index_b += 1 elif state == 2 : if set_b [ index_b , 1 ] < set_a [ index_a , 0 ]: index_b += 1 state = 3 elif set_b [ index_b , 1 ] < set_a [ index_a , 1 ]: intersection_intervals . append ([ set_a [ index_a , 0 ], set_b [ index_b , 1 ]]) index_b += 1 state = 1 else : intersection_intervals . append ( set_a [ index_a , :]) index_a += 1 elif state == 3 : if set_a [ index_a , 0 ] < set_b [ index_b , 0 ]: state = 1 else : state = 2 return np . array ( intersection_intervals )","title":"find_interval_intersection()"},{"location":"utils/#utils.preprocessing.find_local_min_max","text":"summary Find Local Minima and Maxima in a Given Signal. This function takes an input signal and identifies the indices of local minima and maxima. Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold. Parameters: Name Type Description Default signal ndarray The input signal. required threshold float or None Threshold for filtering out minima and maxima below and above this value, respectively. None Returns: Name Type Description tuple ( ndarray , ndarray ) A tuple containing two arrays: - minima_indices: Indices of local minima in the signal. - maxima_indices: Indices of local maxima in the signal. Source code in ngmt\\utils\\preprocessing.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 def find_local_min_max ( signal , threshold = None ): \"\"\"_summary_ Find Local Minima and Maxima in a Given Signal. This function takes an input signal and identifies the indices of local minima and maxima. Optionally, a threshold can be provided to filter out minima and maxima that do not exceed the threshold. Args: signal (numpy.ndarray): The input signal. threshold (float or None, optional): Threshold for filtering out minima and maxima below and above this value, respectively. Returns: tuple(numpy.ndarray, numpy.ndarray): A tuple containing two arrays: - minima_indices: Indices of local minima in the signal. - maxima_indices: Indices of local maxima in the signal. \"\"\" signal_diff = np . diff ( signal ) zero_crossings = np . where ( signal_diff [ 1 :] * signal_diff [: - 1 ] <= 0 )[ 0 ] zero_crossings = zero_crossings + 1 minima_indices = zero_crossings [ signal_diff [ zero_crossings ] >= 0 ] maxima_indices = zero_crossings [ signal_diff [ zero_crossings ] < 0 ] if threshold is not None : maxima_indices = maxima_indices [ signal [ maxima_indices ] > threshold ] minima_indices = minima_indices [ signal [ minima_indices ] < - threshold ] return minima_indices , maxima_indices","title":"find_local_min_max()"},{"location":"utils/#utils.preprocessing.identify_pulse_trains","text":"summary Identify Pulse Trains in a Given Signal. This function takes an input signal and detects pulse trains within the signal. A pulse train is identified as a sequence of values with small intervals between adjacent values. Parameters: Name Type Description Default signal ndarray The input signal. required Returns: Name Type Description list A list of dictionaries, each containing information about a detected pulse train. Each dictionary has the following keys: - 'start': The index of the first value in the pulse train. - 'end': The index of the last value in the pulse train. - 'steps': The number of steps in the pulse train. Source code in ngmt\\utils\\preprocessing.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 def identify_pulse_trains ( signal ): \"\"\"_summary_ Identify Pulse Trains in a Given Signal. This function takes an input signal and detects pulse trains within the signal. A pulse train is identified as a sequence of values with small intervals between adjacent values. Args: signal (numpy.ndarray): The input signal. Returns: list: A list of dictionaries, each containing information about a detected pulse train. Each dictionary has the following keys: - 'start': The index of the first value in the pulse train. - 'end': The index of the last value in the pulse train. - 'steps': The number of steps in the pulse train. \"\"\" pulse_trains = [] walking_flag = 0 threshold = 3.5 * 40 pulse_count = 0 if len ( signal ) > 2 : for i in range ( len ( signal ) - 1 ): if signal [ i + 1 ] - signal [ i ] < threshold : if walking_flag == 0 : pulse_trains . append ({ \"start\" : signal [ i ], \"steps\" : 1 }) pulse_count += 1 walking_flag = 1 else : pulse_trains [ pulse_count - 1 ][ \"steps\" ] += 1 threshold = ( 1.5 * 40 + ( signal [ i ] - pulse_trains [ pulse_count - 1 ][ \"start\" ]) / pulse_trains [ pulse_count - 1 ][ \"steps\" ] ) else : if walking_flag == 1 : pulse_trains [ pulse_count - 1 ][ \"end\" ] = signal [ i - 1 ] walking_flag = 0 threshold = 3.5 * 40 if walking_flag == 1 : if signal [ - 1 ] - signal [ - 2 ] < threshold : pulse_trains [ - 1 ][ \"end\" ] = signal [ - 1 ] pulse_trains [ - 1 ][ \"steps\" ] += 1 else : pulse_trains [ - 1 ][ \"end\" ] = signal [ - 2 ] return pulse_trains","title":"identify_pulse_trains()"},{"location":"utils/#utils.preprocessing.organize_and_pack_results","text":"Organize and Pack Walking Results with Associated Peak Steps. Given lists of walking periods and peak step indices, this function organizes and packs the results into a more structured format. It calculates the number of steps in each walking period, associates peak steps with their corresponding walking periods, and extends the duration of walking periods based on step time. The function also checks for overlapping walking periods and merges them. Parameters: Name Type Description Default walking_periods list List of tuples representing walking periods, where each tuple contains the start and end indices. required peak_steps list List of peak step indices. required Returns: Name Type Description tuple ( list , list ) A tuple containing two elements: - A list of dictionaries representing organized walking results, each dictionary contains: - 'start': Start index of the walking period. - 'end': End index of the walking period. - 'steps': Number of steps within the walking period. - 'mid_swing': List of peak step indices within the walking period. - A list of sorted peak step indices across all walking periods. Source code in ngmt\\utils\\preprocessing.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 def organize_and_pack_results ( walking_periods , peak_steps ): \"\"\"Organize and Pack Walking Results with Associated Peak Steps. Given lists of walking periods and peak step indices, this function organizes and packs the results into a more structured format. It calculates the number of steps in each walking period, associates peak steps with their corresponding walking periods, and extends the duration of walking periods based on step time. The function also checks for overlapping walking periods and merges them. Args: walking_periods (list): List of tuples representing walking periods, where each tuple contains the start and end indices. peak_steps (list): List of peak step indices. Returns: tuple(list, list): A tuple containing two elements: - A list of dictionaries representing organized walking results, each dictionary contains: - 'start': Start index of the walking period. - 'end': End index of the walking period. - 'steps': Number of steps within the walking period. - 'mid_swing': List of peak step indices within the walking period. - A list of sorted peak step indices across all walking periods. \"\"\" num_periods = len ( walking_periods ) organized_results = [ { \"start\" : walking_periods [ i ][ 0 ], \"end\" : walking_periods [ i ][ 1 ], \"steps\" : 0 , \"mid_swing\" : [], } for i in range ( num_periods ) ] all_mid_swing = [] for i in range ( num_periods ): steps_within_period = [ p for p in peak_steps if organized_results [ i ][ \"start\" ] <= p <= organized_results [ i ][ \"end\" ] ] organized_results [ i ][ \"steps\" ] = len ( steps_within_period ) organized_results [ i ][ \"mid_swing\" ] = steps_within_period all_mid_swing . extend ( steps_within_period ) # Calculate step time based on detected peak steps if len ( steps_within_period ) > 2 : step_time = sum ( [ steps_within_period [ j + 1 ] - steps_within_period [ j ] for j in range ( len ( steps_within_period ) - 1 ) ] ) / ( len ( steps_within_period ) - 1 ) organized_results [ i ][ \"start\" ] = int ( organized_results [ i ][ \"start\" ] - 1.5 * step_time / 2 ) organized_results [ i ][ \"end\" ] = int ( organized_results [ i ][ \"end\" ] + 1.5 * step_time / 2 ) all_mid_swing . sort () # Check for overlapping walking periods and merge them i = 0 while i < num_periods - 1 : if organized_results [ i ][ \"end\" ] >= organized_results [ i + 1 ][ \"start\" ]: organized_results [ i ][ \"end\" ] = organized_results [ i + 1 ][ \"end\" ] organized_results [ i ][ \"steps\" ] += organized_results [ i + 1 ][ \"steps\" ] organized_results [ i ][ \"mid_swing\" ] . extend ( organized_results [ i + 1 ][ \"mid_swing\" ] ) organized_results . pop ( i + 1 ) num_periods -= 1 else : i += 1 return organized_results , all_mid_swing","title":"organize_and_pack_results()"},{"location":"utils/#utils.preprocessing.remove_40Hz_drift","text":"summary Remove 40Hz drift from a signal using a high-pass filter. This function applies a high-pass filter to remove low-frequency drift at 40Hz from the input signal signal . Args: signal (array_like): The input signal. Returns: filtered_signal (ndarray): The filtered signal with removed drift. Source code in ngmt\\utils\\preprocessing.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def remove_40Hz_drift ( signal ): \"\"\"_summary_ Remove 40Hz drift from a signal using a high-pass filter. This function applies a high-pass filter to remove low-frequency drift at 40Hz from the input signal `signal`. Args: signal (array_like): The input signal. Returns: filtered_signal (ndarray): The filtered signal with removed drift. \"\"\" numerator_coefficient = np . array ( [ 1 , - 1 ] ) # The numerator coefficient vector of the filter. denominator_coefficient = np . array ( [ 1 , - 0.9748 ] ) # The denominator coefficient vector of the filter. filtered_signal = scipy . signal . filtfilt ( numerator_coefficient , denominator_coefficient , signal , axis = 0 , padtype = \"odd\" , padlen = 3 * ( max ( len ( numerator_coefficient ), len ( denominator_coefficient )) - 1 ), ) return filtered_signal","title":"remove_40Hz_drift()"},{"location":"utils/#utils.preprocessing.resample_interpolate","text":"summary Resample and interpolate a signal to a new sampling rate. This function takes a signal input_signal sampled at an initial sampling rate initial_sampling_rate and resamples it to a new sampling rate target_sampling_rate using linear interpolation. Args: input_signal (array_like): The input signal. initial_sampling_rate (float): The initial sampling rate of the input signal. target_sampling_rate (float): The desired sampling rate for the output signal. Returns: resampled_signal (array_like): The resampled and interpolated signal. Source code in ngmt\\utils\\preprocessing.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def resample_interpolate ( input_signal , initial_sampling_rate , target_sampling_rate ): \"\"\"_summary_ Resample and interpolate a signal to a new sampling rate. This function takes a signal `input_signal` sampled at an initial sampling rate `initial_sampling_rate` and resamples it to a new sampling rate `target_sampling_rate` using linear interpolation. Args: input_signal (array_like): The input signal. initial_sampling_rate (float): The initial sampling rate of the input signal. target_sampling_rate (float): The desired sampling rate for the output signal. Returns: resampled_signal (array_like): The resampled and interpolated signal. \"\"\" recording_time = len ( input_signal ) x = np . arange ( 1 , recording_time + 1 ) xq = np . arange ( 1 , recording_time + 1 , initial_sampling_rate / target_sampling_rate ) interpolator = scipy . interpolate . interp1d ( x , input_signal , kind = \"linear\" , axis = 0 , fill_value = \"extrapolate\" ) # Create an interpolation function and apply it to the data resampled_signal = interpolator ( xq ) return resampled_signal","title":"resample_interpolate()"}]}